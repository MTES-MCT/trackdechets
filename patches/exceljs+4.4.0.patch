diff --git a/node_modules/exceljs/lib/stream/xlsx/workbook-reader.js b/node_modules/exceljs/lib/stream/xlsx/workbook-reader.js
index 0d3afd6..6c7db78 100644
--- a/node_modules/exceljs/lib/stream/xlsx/workbook-reader.js
+++ b/node_modules/exceljs/lib/stream/xlsx/workbook-reader.js
@@ -1,10 +1,8 @@
 const fs = require('fs');
 const {EventEmitter} = require('events');
-const {PassThrough, Readable} = require('readable-stream');
-const nodeStream = require('stream');
+const {pipeline} = require('readable-stream');
 const unzip = require('unzipper');
 const tmp = require('tmp');
-const iterateStream = require('../../utils/iterate-stream');
 const parseSax = require('../../utils/parse-sax');
 
 const StyleManager = require('../../xlsx/xform/style/styles-xform');
@@ -25,18 +23,20 @@ class WorkbookReader extends EventEmitter {
     this.options = {
       worksheets: 'emit',
       sharedStrings: 'cache',
-      hyperlinks: 'ignore',
-      styles: 'ignore',
-      entries: 'ignore',
+      hyperlinks: 'cache',
+      styles: 'cache',
+      entries: 'emit',
       ...options,
     };
 
     this.styles = new StyleManager();
     this.styles.init();
+    this._parsedStyles = false;
+    this.waitingWorksheets = [];
   }
 
   _getStream(input) {
-    if (input instanceof nodeStream.Readable || input instanceof Readable) {
+    if (input.pipe) {
       return input;
     }
     if (typeof input === 'string') {
@@ -76,16 +76,51 @@ class WorkbookReader extends EventEmitter {
     }
   }
 
+  async *flushQueue(force) {
+    if (!force && !this.isDirectReady()) return; // not ready yet! do nothing
+    if (this.waitingWorksheets.length === 0) return; // queue flushed!
+    const queue = this.waitingWorksheets; // make a copy
+    this.waitingWorksheets = []; // clear, flushQueue can be called again while this is still processing async
+    for (const {sheetNo, path, tempFileCleanupCallback} of queue) {
+      const fileStream = fs.createReadStream(path);
+      yield* this._parseWorksheet(fileStream, sheetNo);
+      tempFileCleanupCallback();
+    }
+  }
+
+  async *queueWorksheet(entry, sheetNo) {
+    // dependencies are loaded, we can now directly parse without queueing
+    if (this.isDirectReady()) {
+      yield* this._parseWorksheet(entry, sheetNo);
+      return;
+    }
+
+    // create temp file for each worksheet and push to queue
+    await new Promise((resolve, reject) => {
+      tmp.file((err, path, fd, tempFileCleanupCallback) => {
+        if (err) {
+          reject(err);
+          return;
+        }
+        this.waitingWorksheets.push({sheetNo, path, tempFileCleanupCallback});
+
+        pipeline(entry, fs.createWriteStream(path), e => {
+          if (e) {
+            reject(e);
+            return;
+          }
+          resolve();
+        });
+      });
+    });
+  }
+
   async *parse(input, options) {
     if (options) this.options = options;
     const stream = (this.stream = this._getStream(input || this.input));
-    const zip = unzip.Parse({forceStream: true});
-    stream.pipe(zip);
-
-    // worksheets, deferred for parsing after shared strings reading
-    const waitingWorkSheets = [];
+    const zip = stream.pipe(unzip.Parse({forceStream: true}));
 
-    for await (const entry of iterateStream(zip)) {
+    for await (const entry of zip) {
       let match;
       let sheetNo;
       switch (entry.path) {
@@ -104,49 +139,28 @@ class WorkbookReader extends EventEmitter {
           await this._parseStyles(entry);
           break;
         default:
+          if (entry.path.match(/xl\/worksheets\/_rels\/sheet\d+[.]xml.rels/)) {
+            match = entry.path.match(/xl\/worksheets\/_rels\/sheet(\d+)[.]xml.rels/);
+            sheetNo = match[1];
+            yield* this._parseHyperlinks(entry, sheetNo);
+            break;
+          }
+
           if (entry.path.match(/xl\/worksheets\/sheet\d+[.]xml/)) {
             match = entry.path.match(/xl\/worksheets\/sheet(\d+)[.]xml/);
             sheetNo = match[1];
-            if (this.sharedStrings && this.workbookRels) {
-              yield* this._parseWorksheet(iterateStream(entry), sheetNo);
-            } else {
-              // create temp file for each worksheet
-              await new Promise((resolve, reject) => {
-                tmp.file((err, path, fd, tempFileCleanupCallback) => {
-                  if (err) {
-                    return reject(err);
-                  }
-                  waitingWorkSheets.push({sheetNo, path, tempFileCleanupCallback});
-
-                  const tempStream = fs.createWriteStream(path);
-                  tempStream.on('error', reject);
-                  entry.pipe(tempStream);
-                  return tempStream.on('finish', () => {
-                    return resolve();
-                  });
-                });
-              });
-            }
-          } else if (entry.path.match(/xl\/worksheets\/_rels\/sheet\d+[.]xml.rels/)) {
-            match = entry.path.match(/xl\/worksheets\/_rels\/sheet(\d+)[.]xml.rels/);
-            sheetNo = match[1];
-            yield* this._parseHyperlinks(iterateStream(entry), sheetNo);
+            yield* this.queueWorksheet(entry, sheetNo);
           }
           break;
       }
-      entry.autodrain();
+      yield* this.flushQueue(); // after every entry parse, try to flush the queue
+      await entry.autodrain().promise();
     }
+    yield* this.flushQueue(true); // file totally ended, force a final flush
+  }
 
-    for (const {sheetNo, path, tempFileCleanupCallback} of waitingWorkSheets) {
-      let fileStream = fs.createReadStream(path);
-      // TODO: Remove once node v8 is deprecated
-      // Detect and upgrade old fileStreams
-      if (!fileStream[Symbol.asyncIterator]) {
-        fileStream = fileStream.pipe(new PassThrough());
-      }
-      yield* this._parseWorksheet(fileStream, sheetNo);
-      tempFileCleanupCallback();
-    }
+  isDirectReady() {
+    return this.model && this.workbookRels && this._parsedStyles && this._parsedSharedStrings;
   }
 
   _emitEntry(payload) {
@@ -157,14 +171,14 @@ class WorkbookReader extends EventEmitter {
 
   async _parseRels(entry) {
     const xform = new RelationshipsXform();
-    this.workbookRels = await xform.parseStream(iterateStream(entry));
+    this.workbookRels = await xform.parseStream(entry);
   }
 
   async _parseWorkbook(entry) {
     this._emitEntry({type: 'workbook'});
 
     const workbook = new WorkbookXform();
-    await workbook.parseStream(iterateStream(entry));
+    await workbook.parseStream(entry);
 
     this.properties = workbook.map.workbookPr;
     this.model = workbook.model;
@@ -179,6 +193,7 @@ class WorkbookReader extends EventEmitter {
       case 'emit':
         break;
       default:
+        this._parsedSharedStrings = true;
         return;
     }
 
@@ -186,7 +201,7 @@ class WorkbookReader extends EventEmitter {
     let richText = [];
     let index = 0;
     let font = null;
-    for await (const events of parseSax(iterateStream(entry))) {
+    for await (const events of parseSax(entry)) {
       for (const {eventType, value} of events) {
         if (eventType === 'opentag') {
           const node = value;
@@ -280,14 +295,16 @@ class WorkbookReader extends EventEmitter {
         }
       }
     }
+    this._parsedSharedStrings = true;
   }
 
   async _parseStyles(entry) {
     this._emitEntry({type: 'styles'});
     if (this.options.styles === 'cache') {
       this.styles = new StyleManager();
-      await this.styles.parseStream(iterateStream(entry));
+      await this.styles.parseStream(entry);
     }
+    this._parsedStyles = true;
   }
 
   *_parseWorksheet(iterator, sheetNo) {
@@ -299,8 +316,11 @@ class WorkbookReader extends EventEmitter {
       options: this.options,
     });
 
-    const matchingRel = (this.workbookRels || []).find(rel => rel.Target === `worksheets/sheet${sheetNo}.xml`);
-    const matchingSheet = matchingRel && (this.model.sheets || []).find(sheet => sheet.rId === matchingRel.Id);
+    const matchingRel = (this.workbookRels || []).find(
+      rel => rel.Target === `worksheets/sheet${sheetNo}.xml`
+    );
+    const matchingSheet =
+      matchingRel && (this.model.sheets || []).find(sheet => sheet.rId === matchingRel.Id);
     if (matchingSheet) {
       worksheetReader.id = matchingSheet.id;
       worksheetReader.name = matchingSheet.name;
diff --git a/node_modules/exceljs/lib/xlsx/xform/base-xform.js b/node_modules/exceljs/lib/xlsx/xform/base-xform.js
index cb48cfa..e8e5524 100644
--- a/node_modules/exceljs/lib/xlsx/xform/base-xform.js
+++ b/node_modules/exceljs/lib/xlsx/xform/base-xform.js
@@ -64,9 +64,7 @@ class BaseXform {
         } else if (eventType === 'text') {
           this.parseText(value);
         } else if (eventType === 'closetag') {
-          if (!this.parseClose(value.name)) {
-            return this.model;
-          }
+          if (!this.parseClose(value.name)) break;
         }
       }
     }
