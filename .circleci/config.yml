version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:10.13.0-browsers
    working_directory: ~/project/trackdechets

jobs:
  check-docker:
    executor: node
    steps:
      - run: |
          if [[ -z "$DOCKERHUB_USER" || -z "$DOCKERHUB_PASSWORD" ]]; then
            echo "Missing DOCKERHUB_USER or DOCKERHUB_PASSWORD environment variables!"
            exit 1
          fi

  build-service:
    description: "Build and push <service-name> (located in <folder-name>) to the Docker repository"
    parameters:
      service-name:
        type: string
      folder-name:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          docker build -t betagouv/trackdechets-<< parameters.service-name >>:$CIRCLE_SHA1 ./<< parameters.folder-name >>
          docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
          docker push betagouv/trackdechets-<< parameters.service-name >>:$CIRCLE_SHA1
      - run: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            docker tag betagouv/trackdechets-<< parameters.service-name >>:$CIRCLE_SHA1 betagouv/trackdechets-<< parameters.service-name >>:latest
            docker push betagouv/trackdechets-<< parameters.service-name >>:latest
          fi

  deploy:
    machine:
      enabled: true
    working_directory: ~/project/trackdechets
    parameters:
      user:
        type: env_var_name
        default: SSH_USER
      host:
        type: env_var_name
        default: SSH_HOST
    steps:
      - checkout
      - run:
          name: Deploy Over SSH
          command: |
            scp docker-compose.yml ${<< parameters.user >>}@${<< parameters.host >>}:/srv/trackdechets/
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "docker pull betagouv/trackdechets-postgres:latest"
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "docker pull betagouv/trackdechets-api:latest"
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "docker pull betagouv/trackdechets-ui:latest"
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "docker pull betagouv/trackdechets-pdf:latest"
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "docker pull betagouv/trackdechets-insee:latest"
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "docker pull betagouv/trackdechets-mail:latest"
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "docker pull betagouv/trackdechets-etl:latest"
            ssh ${<< parameters.user >>}@${<< parameters.host >>} "cd /srv/trackdechets/ ; docker-compose up -d"

  deploy-validation:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy to validation over SSH
          command: |
            ssh $SSH_USER@$SSH_HOST_BU "cd /srv/trackdechets/
            git pull
            docker-compose -f docker-compose.val.yml build
            docker-compose -f docker-compose.val.yml up -d"

workflows:
  build-and-deploy:
    jobs:
      - check-docker:
          filters:
            branches:
              only: master
      - build-service:
          name: build-postgres
          service-name: postgres
          folder-name: postgres
          requires: check-docker
      - build-service:
          name: build-ui
          service-name: ui
          folder-name: front
          requires: check-docker
      - build-service:
          name: build-api
          service-name: api
          folder-name: back
          requires: check-docker
      - build-service:
          name: build-insee
          service-name: insee
          folder-name: insee
          requires: check-docker
      - build-service:
          name: build-pdf
          service-name: pdf
          folder-name: pdf
          requires: check-docker
      - build-service:
          name: build-mail
          service-name: mail
          folder-name: mail
          requires: check-docker
      - build-service:
          name: build-etl
          service-name: etl
          folder-name: etl
          requires: check-docker
      - deploy-prod:
          requires:
            - build-postgres
            - build-api
            - build-ui
            - build-insee
            - build-pdf
            - build-mail
            - build-etl
          filters:
            branches:
              only: master

  deploy-validation:
    jobs:
      - deploy-validation:
          filters:
            branches:
              only: dev
