"use strict";(self.webpackChunktd_doc=self.webpackChunktd_doc||[]).push([[4238],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9359:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return s}});var r=n(3117),a=(n(7294),n(3905));const o={title:"Introduction \xe0 GraphQL"},i=void 0,u={unversionedId:"concepts/graphql",id:"concepts/graphql",title:"Introduction \xe0 GraphQL",description:"Comparaison avec le standard REST",source:"@site/docs/concepts/graphql.md",sourceDirName:"concepts",slug:"/concepts/graphql",permalink:"/concepts/graphql",draft:!1,editUrl:"https://github.com/MTES-MCT/trackdechets/edit/dev/doc/docs/concepts/graphql.md",tags:[],version:"current",frontMatter:{title:"Introduction \xe0 GraphQL"},sidebar:"docs",previous:{title:"Lien entre l'API et l'interface web Trackd\xe9chets",permalink:"/concepts/api-ui"}},p={},s=[{value:"Comparaison avec le standard REST",id:"comparaison-avec-le-standard-rest",level:2},{value:"\xc0 propos des op\xe9rations de type <code>query</code> et <code>mutation</code>",id:"\xe0-propos-des-op\xe9rations-de-type-query-et-mutation",level:2},{value:"Queries",id:"queries",level:3},{value:"Mutations",id:"mutations",level:3}],l={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"comparaison-avec-le-standard-rest"},"Comparaison avec le standard REST"),(0,a.kt)("p",null,"Dans le standard REST, la m\xe9thode de requ\xeate HTTP (",(0,a.kt)("inlineCode",{parentName:"p"},"GET"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PUT"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"DELETE"),") d\xe9termine le type d'op\xe9ration. Dans le standard GraphQL, un contenu de requ\xeate JSON est pass\xe9 que ce soit pour une ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," ou une ",(0,a.kt)("inlineCode",{parentName:"p"},"mutation"),", la m\xe9thode de requ\xeate est donc toujours ",(0,a.kt)("inlineCode",{parentName:"p"},"POST"),". La seule exception est la requ\xeate d'introspection qui est un simple ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," sur le point de terminaison GraphQL."),(0,a.kt)("p",null,"Toutes les requ\xeates se font sur un point de terminaison unique \xe0 la ",(0,a.kt)("a",{parentName:"p",href:"/reference/environments/"},"racine de l'API")),(0,a.kt)("p",null,"Pour faire une requ\xeate GraphQL en utilisant cURL, vous devez faire un ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," avec un corps JSON. Le corps de la requ\xeate doit contenir une chaine de caract\xe8res appel\xe9e ",(0,a.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  -X POST \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer YOUR_TOKEN" \\\n  --data \'{"query": "query { me { name} }"}\' https://api.trackdechets.beta.gouv.fr/\n')),(0,a.kt)("h2",{id:"\xe0-propos-des-op\xe9rations-de-type-query-et-mutation"},"\xc0 propos des op\xe9rations de type ",(0,a.kt)("inlineCode",{parentName:"h2"},"query")," et ",(0,a.kt)("inlineCode",{parentName:"h2"},"mutation")),(0,a.kt)("p",null,"Les deux types d'op\xe9ration autoris\xe9es sur l'API GraphQL Trackd\xe9chets sont les ",(0,a.kt)("em",{parentName:"p"},"queries")," et les ",(0,a.kt)("em",{parentName:"p"},"mutations"),". Pour faire un parall\xe8le avec le standard REST, les ",(0,a.kt)("em",{parentName:"p"},"queries")," se comportent comme des requ\xeates ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," et les mutations se comportent comme des requ\xeates ",(0,a.kt)("inlineCode",{parentName:"p"},"POST"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"PATCH"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"DELETE"),". Le nom de la mutation d\xe9termine l'op\xe9ration qui sera execut\xe9e. Les requ\xeates et mutations ont une forme similaire avec quelques diff\xe9rences."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"La cl\xe9 JSON utilis\xe9e est toujours ",(0,a.kt)("inlineCode",{parentName:"p"},'"query"'),", que ce soit pour une ",(0,a.kt)("em",{parentName:"p"},"query")," ou une ",(0,a.kt)("em",{parentName:"p"},"mutation")," GraphQL. La diff\xe9rence se fait dans la chaine de caract\xe8re pass\xe9e en valeur :"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'// exemple de query\n{ "query": "query { ... }" }\n\n// exemple de mutation\n{ "query" : "mutation { ... }"}\n'))),(0,a.kt)("h3",{id:"queries"},"Queries"),(0,a.kt)("p",null,"Les ",(0,a.kt)("em",{parentName:"p"},"queries")," GraphQL retournent uniquement les donn\xe9es sp\xe9cifi\xe9es. Pour construire une ",(0,a.kt)("em",{parentName:"p"},"query")," il faut sp\xe9cifier les champs imbriqu\xe9s jusqu'\xe0 un champs de type scalaire (string, int, etc)."),(0,a.kt)("p",null,"Exemple avec une requ\xeate de profil utilisateur"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  me {\n    name\n    email\n    companies {\n      name\n      siret\n    }\n  }\n}\n")),(0,a.kt)("p",null,"Des variables peuvent \xe9galement \xeatre ajout\xe9es sur certaines ",(0,a.kt)("em",{parentName:"p"},"queries"),"."),(0,a.kt)("p",null,"Exemple avec une requ\xeate d'information entreprise en passant un num\xe9ro siret en variable :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  companyInfos(siret: "13001045700013") {\n    name,\n    address\n  }\n}\n')),(0,a.kt)("h3",{id:"mutations"},"Mutations"),(0,a.kt)("p",null,"Pour construire une mutation, il faut sp\xe9cifier trois choses:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Le nom de la mutation qui correspond \xe0 l'op\xe9ration \xe0 ex\xe9cuter"),(0,a.kt)("li",{parentName:"ol"},"Les donn\xe9es d'input pass\xe9es en argument"),(0,a.kt)("li",{parentName:"ol"},"Les donn\xe9es retourn\xe9es")),(0,a.kt)("p",null,"Exemple avec une requ\xeate permettant de valider la r\xe9ception d'un bordereau de d\xe9chets dangereux :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  markAsReceived(\n    id: "sju8d6g0JU61G76F",\n    receivedInfo: {\n      receivedBy: "Bill",\n      receivedAt: "2019-01-17",\n      signedAt: "2019-01-17",\n      wasteAcceptationStatus: "ACCEPTED",\n      quantityReceived: 0\n    }){\n    id\n    status\n  }\n}\n')))}c.isMDXComponent=!0}}]);