"use strict";(self.webpackChunktrackdechets=self.webpackChunktrackdechets||[]).push([[2238],{8297:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"reference/api-reference/registre/scalars","title":"Scalars","description":"Boolean","source":"@site/docs/reference/api-reference/registre/scalars.md","sourceDirName":"reference/api-reference/registre","slug":"/reference/api-reference/registre/scalars","permalink":"/reference/api-reference/registre/scalars","draft":false,"unlisted":false,"editUrl":"https://github.com/MTES-MCT/trackdechets/edit/dev/doc/docs/reference/api-reference/registre/scalars.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"scalars","title":"Scalars","slug":"scalars","sidebar_position":9},"sidebar":"docs","previous":{"title":"Input objects","permalink":"/reference/api-reference/registre/inputObjects"},"next":{"title":"Queries","permalink":"/reference/api-reference/registreV2/queries"}}');var t=n(4848),i=n(8453);const a={id:"scalars",title:"Scalars",slug:"scalars",sidebar_position:9},c=void 0,l={},d=[{value:"Boolean",id:"boolean",level:2},{value:"DateTime",id:"datetime",level:2},{value:"Float",id:"float",level:2},{value:"ID",id:"id",level:2},{value:"Int",id:"int",level:2},{value:"JSON",id:"json",level:2},{value:"String",id:"string",level:2},{value:"URL",id:"url",level:2}];function o(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"boolean",children:"Boolean"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"Boolean"})," scalar type represents ",(0,t.jsx)(r.code,{children:"true"})," or ",(0,t.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"datetime",children:"DateTime"}),"\n",(0,t.jsxs)(r.p,{children:["Le scalaire ",(0,t.jsx)(r.code,{children:"DateTime"})," accepte des chaines de caract\xe8res\nformatt\xe9es selon le standard ISO 8601. Exemples:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:'"yyyy-MM-dd" (eg. 2020-11-23)'}),"\n",(0,t.jsxs)(r.li,{children:['"yyyy-MM-ddTHH:mm',":ss",'" (eg. 2020-11-23T13:34:55)']}),"\n",(0,t.jsxs)(r.li,{children:['"yyyy-MM-ddTHH:mm',":ssX",'" (eg. 2020-11-23T13:34:55Z)']}),"\n",(0,t.jsxs)(r.li,{children:["\"yyyy-MM-dd'T'HH:mm",":ss",'.SSS" (eg. 2020-11-23T13:34:55.987)']}),"\n",(0,t.jsxs)(r.li,{children:["\"yyyy-MM-dd'T'HH:mm",":ss",'.SSSX" (eg. 2020-11-23T13:34:55.987Z)']}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Si aucune information de timezone n'est renseign\xe9e,\nc'est le fuseau horaire de Paris qui sera automatiquement utilis\xe9 (CET ou CEST).\nEg. 2020-11-23T00:00:00 sera interpr\xe9t\xe9 comme 2020-11-22T23:00:00Z (CET) ou 2020-11-22T22:00:00Z (CEST)."}),"\n",(0,t.jsx)(r.h2,{id:"float",children:"Float"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"Float"})," scalar type represents signed double-precision fractional values as specified by ",(0,t.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/IEEE_floating_point",children:"IEEE 754"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"id",children:"ID"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"ID"})," scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as ",(0,t.jsx)(r.code,{children:'"4"'}),") or integer (such as ",(0,t.jsx)(r.code,{children:"4"}),") input value will be accepted as an ID."]}),"\n",(0,t.jsx)(r.h2,{id:"int",children:"Int"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"Int"})," scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."]}),"\n",(0,t.jsx)(r.h2,{id:"json",children:"JSON"}),"\n",(0,t.jsx)(r.h2,{id:"string",children:"String"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"String"})," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."]}),"\n",(0,t.jsx)(r.h2,{id:"url",children:"URL"}),"\n",(0,t.jsx)(r.p,{children:"Cha\xeene de caract\xe8re au format URL, d\xe9butant par un protocole http(s)."})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var s=n(6540);const t={},i=s.createContext(t);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);