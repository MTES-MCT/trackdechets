"use strict";(self.webpackChunktrackdechets=self.webpackChunktrackdechets||[]).push([[6569],{1363:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"reference/api-reference/bspaoh/scalars","title":"Scalars","description":"Boolean","source":"@site/docs/reference/api-reference/bspaoh/scalars.md","sourceDirName":"reference/api-reference/bspaoh","slug":"/reference/api-reference/bspaoh/scalars","permalink":"/reference/api-reference/bspaoh/scalars","draft":false,"unlisted":false,"editUrl":"https://github.com/MTES-MCT/trackdechets/edit/dev/doc/docs/reference/api-reference/bspaoh/scalars.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"scalars","title":"Scalars","slug":"scalars","sidebar_position":9},"sidebar":"docs","previous":{"title":"Input objects","permalink":"/reference/api-reference/bspaoh/inputObjects"},"next":{"title":"Queries","permalink":"/reference/api-reference/bsvhu/queries"}}');var t=s(4848),a=s(8453);const i={id:"scalars",title:"Scalars",slug:"scalars",sidebar_position:9},c=void 0,l={},d=[{value:"Boolean",id:"boolean",level:2},{value:"DateTime",id:"datetime",level:2},{value:"Float",id:"float",level:2},{value:"ID",id:"id",level:2},{value:"Int",id:"int",level:2},{value:"JSON",id:"json",level:2},{value:"JSONObject",id:"jsonobject",level:2},{value:"String",id:"string",level:2},{value:"URL",id:"url",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"boolean",children:"Boolean"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Boolean"})," scalar type represents ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"datetime",children:"DateTime"}),"\n",(0,t.jsxs)(n.p,{children:["Le scalaire ",(0,t.jsx)(n.code,{children:"DateTime"})," accepte des chaines de caract\xe8res\nformatt\xe9es selon le standard ISO 8601. Exemples:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"yyyy-MM-dd" (eg. 2020-11-23)'}),"\n",(0,t.jsxs)(n.li,{children:['"yyyy-MM-ddTHH:mm',":ss",'" (eg. 2020-11-23T13:34:55)']}),"\n",(0,t.jsxs)(n.li,{children:['"yyyy-MM-ddTHH:mm',":ssX",'" (eg. 2020-11-23T13:34:55Z)']}),"\n",(0,t.jsxs)(n.li,{children:["\"yyyy-MM-dd'T'HH:mm",":ss",'.SSS" (eg. 2020-11-23T13:34:55.987)']}),"\n",(0,t.jsxs)(n.li,{children:["\"yyyy-MM-dd'T'HH:mm",":ss",'.SSSX" (eg. 2020-11-23T13:34:55.987Z)']}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Si aucune information de timezone n'est renseign\xe9e,\nc'est le fuseau horaire de Paris qui sera automatiquement utilis\xe9 (CET ou CEST).\nEg. 2020-11-23T00:00:00 sera interpr\xe9t\xe9 comme 2020-11-22T23:00:00Z (CET) ou 2020-11-22T22:00:00Z (CEST)."}),"\n",(0,t.jsx)(n.h2,{id:"float",children:"Float"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Float"})," scalar type represents signed double-precision fractional values as specified by ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/IEEE_floating_point",children:"IEEE 754"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"id",children:"ID"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ID"})," scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as ",(0,t.jsx)(n.code,{children:'"4"'}),") or integer (such as ",(0,t.jsx)(n.code,{children:"4"}),") input value will be accepted as an ID."]}),"\n",(0,t.jsx)(n.h2,{id:"int",children:"Int"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Int"})," scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."]}),"\n",(0,t.jsx)(n.h2,{id:"json",children:"JSON"}),"\n",(0,t.jsx)(n.h2,{id:"jsonobject",children:"JSONObject"}),"\n",(0,t.jsx)(n.h2,{id:"string",children:"String"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"String"})," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."]}),"\n",(0,t.jsx)(n.h2,{id:"url",children:"URL"}),"\n",(0,t.jsx)(n.p,{children:"Cha\xeene de caract\xe8re au format URL, d\xe9butant par un protocole http(s)."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);