"""
The `DateTime` scalar expects a date-formatted string matching one of the following formats:
- "yyyy-MM-dd" (eg. 2020-11-23)
- "yyyy-MM-ddTHH:mm:ss" (eg. 2020-11-23T13:34:55)
- "yyyy-MM-ddTHH:mm:ssX" (eg. 2020-11-23T13:34:55Z)
- "yyyy-MM-dd'T'HH:mm:ss.SSS" (eg. 2020-11-23T13:34:55.987)
- "yyyy-MM-dd'T'HH:mm:ss.SSSX" (eg. 2020-11-23T13:34:55.987Z)
"""
scalar DateTime

scalar JSON

type Query {
  "Renvoie un BSD sélectionné par son ID (opaque ou lisible, l'un des deux doit être fourni)"
  form(
    "Identifiant opaque du BSD"
    id: ID
    "Identifiant lisible du BSD"
    readableId: String
  ): Form

  """
  Renvoie les BSDs de l'établissement sélectionné.
  Si aucun SIRET n'est précisé et que l'utilisateur est membre d'une seule entreprise
  alors les BSD de cette entreprise sont retournés.
  Si l'utilisateur est membre de 2 entreprises ou plus, vous devez obligatoirement
  préciser un SIRET
  Si l'utilisateur n'est membre d'aucune entreprise, un tableau vide sera renvoyé

  Vous pouvez filtrer:
  - par rôle que joue votre entreprise sur le BSD via `role`
  - par date de dernière modification via `updatedAfter`
  - par date d'envoi via `sentAfter`
  - par statut du BSD via `status`
  - les BSD qui attendent une action (ou non) de votre part via `hasNextStep`
  - par code déchet via `wasteCode`
  - par SIRET d'une entreprise présente n'importe où sur le bordereau via `siretPresentOnForm`

  Par défaut:
  - tous les BSD accessibles sont retournés
  - les BSD sont classés par date de création, de la plus récente à la plus vieille
  - les résultats sont paginés par 50. Il est possible de modifier cette valeur via `first` ou `last` en fonction du curseur utilisé
  - pour afficher la suite des résultats, utiliser `cursorAfter` ou `cursorBefore`
  """
  forms(
    "SIRET d'un établissement dont je suis membre"
    siret: String

    """
    DEPRECATED - (Optionnel) PAGINATION
    Nombre d'éléments à ne pas récupérer en début de liste dans le mode de pagination par "offset"
    Utiliser en conjonction avec `first` pour paginer "en avant" (des plus récents aux plus anciens)
    Utiliser en conjonction avec `last` pour paginer "en arrière" (des plus anciens aux plus récents)
    Défaut à 0
    """
    skip: Int

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Curseur après lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus récents
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    cursorAfter: ID

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `cursorAfter` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Nombre de bordereaux retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des bordereaux les plus anciens aux bordereaux les plus récents)
    Curseur avant lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    cursorBefore: ID

    """
    (Optionnel) PAGINATION
    Nombre de bordereaux retournés avant le `cursorBefore`
    Défaut à 50, maximum à 500
    """
    last: Int

    """
    (Optionnel) Retourne les BSD envoyés après la date
    Filtre sur la date d'envoi (date de la case 9 du bordereau)
    Au format (YYYY-MM-DD)
    Par défaut vide, aucun filtre n'est appliqué
    """
    sentAfter: String

    """
    (Optionnel) Retourne les BSD modifiés après la date
    Filtre sur la date de dernière modification
    Au format (YYYY-MM-DD)
    Par défaut vide, aucun filtre n'est appliqué
    """
    updatedAfter: String

    """
    (Optionnel) Filtre sur les statuts des bordereaux
    Si aucun filtre n'est passé, les bordereaux seront retournés quel que soit leur statut
    Défaut à vide.
    """
    status: [FormStatus!]

    """
    (Optionnel) Filtre sur le role de demandeur dams le bordereau
    Par exemple:
     - `roles: [TRANSPORTER]` renverra les bordereaux pour lesquels je suis transporteur
     - `roles: [EMITTER, RECIPIENT]` renverra les bordereaux dont je suis l'émetteur ou le destinataire final
    Voir `FormRole` pour la liste des roles sur lesquels il est possible de filtrer.
    Si aucune filtre n'est passé, les bordereaux seront retournés quel que soit votre role dessus.
    Défaut à vide.
    """
    roles: [FormRole!]

    """
    (Optionnel) Permet de filtrer sur les bordereaux en attente d'une action de votre part
    Si `true`, seul les bordereaux attendant une action sont renvoyés
    Si `false`, seul les bordereaux n'attendant aucune action son renvoyés
    Si vide, tous les bordereaux sont renvoyés
    Défaut à vide.
    """
    hasNextStep: Boolean

    """
    (Optionnel) Siret d'une autre entreprise présente sur le bordereau
    Vous n'avez pas besoin d'être membre de cette entreprise.
    Seuls les bordereaux ou cette entreprise apparait (dans n'importe quel cadre) seront retournés.
    Défaut à vide.
    """
    siretPresentOnForm: String

    """
    (Optionnel) Code déchet pour affiner la recherche
    Ex: 01 03 04* (Veillez à bien respecter les espaces).
    Défaut à vide.
    """
    wasteCode: String
  ): [Form!]!

  "Renvoie des statistiques sur le volume de déchets entrant et sortant"
  stats: [CompanyStat!]!

  "Renvoie des BSD candidats à un regroupement dans une annexe 2"
  appendixForms(
    "Siret d'un des établissements dont je suis membre"
    siret: String!
    "(Optionnel) Code déchet pour affiner la recherche"
    wasteCode: String
  ): [Form!]!

  """
  Renvoie un token pour télécharger un pdf de BSD
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  formPdf("ID d'un BSD" id: ID): FileDownload!

  """
  Renvoie un token pour télécharger un csv du regsitre
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  formsRegister(
    """
    Liste de SIRET pour lesquelles exporter le registre
    """
    sirets: [String!]!

    """
    (Optionnel) Modèle de registre (exhaustif, entrants, sortants, transport, négociants)
    Défaut: ALL
    """
    exportType: FormsRegisterExportType

    """
    (Optionnel) Filtre les données par une date de début
    Défaut: aucune valeur
    """
    startDate: DateTime

    """
    (Optionnel) Filtre les données par une date de fin
    Défaut: aucune valeur
    """
    endDate: DateTime

    """
    (Optionnel) Filtre les données par code déchet
    Défaut: Tous les codes déchets
    """
    wasteCode: String

    """
    (Optionnel) Format de l'export
    Défaut: csv
    """
    exportFormat: FormsRegisterExportFormat
  ): FileDownload!

  """
  Renvoie les changements de statut des bordereaux de l'entreprise sélectionnée.
  La liste est paginée par pages de 100 items, ordonnée par date décroissante (champ `loggedAt`)
  Seuls les changements de statut disposant d'un champ `loggedAt` non nul sont retournés
  """
  formsLifeCycle(
    "(Optionnel) SIRET d'un établissement dont je suis membre"
    siret: String
    "(Optionnel) Date formatée après laquelle les changements de statut doivent être retournés (YYYY-MM-DD)"
    loggedBefore: String
    "(Optionnel) Date formatée avant laquelle les changements de statut doivent être retournés (YYYY-MM-DD), optionnel"
    loggedAfter: String
    """
    (Optionnel) PAGINATION
    Permet de paginer les changements de statut "en avant"
    (des changements de statut les plus récents aux changements de statut les plus anciens)
    Curseur après lequel les changements de statut doivent être retournés
    Attend un identifiant (propriété `id`) d'un changement de statut
    Défaut à vide, pour retourner les changements de statut les plus récents
    Le changement de statut précisé dans le curseur ne fait pas partie du résultat
    """
    cursorAfter: String
    """
    (Optionnel) PAGINATION
    Permet de paginer les changements de statut "en arrière"
    (des changements de statut les plus anciens aux changements de statut les plus récents)
    Curseur avant lequel les changements de statut doivent être retournés
    Attend un identifiant (propriété `id`) d'un changement de statut
    Défaut à vide, pour retourner les changements de statut les plus anciens
    Le changement de statut précisé dans le curseur ne fait pas partie du résultat
    """
    cursorBefore: String
    "(Optionnel) ID d'un BSD en particulier"
    formId: ID
  ): formsLifeCycleData!
}

type Mutation {
  "Crée un nouveau bordereau"
  createForm(
    "Payload de création d'un bordereau"
    createFormInput: CreateFormInput!
  ): Form!

  "Met à jour un bordereau existant"
  updateForm(
    "Payload de mise à jour d'un bordereau"
    updateFormInput: UpdateFormInput!
  ): Form!

  "DEPRECATED - Sauvegarde un BSD (création ou modification, si `FormInput` contient un ID)"
  saveForm("Payload du BSD" formInput: FormInput!): Form
    @deprecated(reason: "Utiliser createForm / updateForm selon le besoin")

  "Met à jour la plaque d'immatriculation ou le champ libre du transporteur"
  updateTransporterFields(
    "ID d'un BSD"
    id: ID!
    "Plaque d'immatriculation du transporteur"
    transporterNumberPlate: String
    "Champ libre, utilisable par exemple pour noter les tournées des transporteurs"
    transporterCustomInfo: String
  ): Form

  "Supprime un BSD"
  deleteForm("ID d'un BSD" id: ID!): Form

  "Duplique un BSD"
  duplicateForm("ID d'un BSD" id: ID!): Form

  """
  Scelle un BSD
  Les champs suivants sont obligatoires pour pouvoir sceller un bordereau et
  doivent avoir été renseignés au préalable

  ```
  emitter: {
    type
    company: {
      siret
      name
      address
      contact
      phone
      mail
    }
  }
  recipient: {
    processingOperation
    company: {
      siret
      name
      address
      contact
      phone
      mail
    }
  }
  transporter: {
    company: {
      siret
      name
      address
      contact
      mail
      phone
    }
    receipt
    department
    validityLimit
    numberPlate
  }
  wasteDetails: {
    code
    // onuCode est optionnel pour les déchets non-dangereux
    onuCode
    name
    packagings
    numberOfPackages
    quantity
    quantityType
    consistence
  }
  ```
  """
  markAsSealed("ID d'un BSD" id: ID!): Form

  "Valide l'envoi d'un BSD"
  markAsSent(
    "ID d'un BSD"
    id: ID!
    "Informations liées à l'envoi"
    sentInfo: SentFormInput!
  ): Form
    @deprecated(
      reason: "Utiliser la mutation signedByTransporter permettant d'apposer les signatures collecteur-transporteur (case 8) et émetteur (case 9)"
    )

  "Valide la réception d'un BSD"
  markAsReceived(
    "ID d'un BSD"
    id: ID!
    "Informations liées à la réception"
    receivedInfo: ReceivedFormInput!
  ): Form

  "Valide le traitement d'un BSD"
  markAsProcessed(
    "ID d'un BSD"
    id: ID!
    "Informations liées au traitement"
    processedInfo: ProcessedFormInput!
  ): Form

  """
  Permet de transférer le déchet à un transporteur lors de la collecte initiale (signatures en case 8 et 9)
  ou après une étape d'entreposage provisoire ou de reconditionnement (signatures en case 18 et 19).
  Cette mutation doit être appelée avec le token du collecteur-transporteur.
  L'établissement émetteur (resp. d'entreposage provisoire ou de reconditionnement) est authentifié quant à lui
  grâce à son code de sécurité disponible sur le tableau de bord Trackdéchets (Mon Compte > Établissements > Sécurité).
  D'un point de vue pratique, cela implique qu'un responsable de l'établissement émetteur (resp. d'entreposage provisoire ou de reconditionnement)
  renseigne le code de sécurité sur le terminal du collecteur-transporteur.
  Dans le cas où un éco-organisme figure sur le BSD, il est également possible de signer avec son code plutôt que celui de l'émetteur.
  Il faut alors fournir le code de l'éco-organisme en indiquant qu'il est l'auteur de la signature (signingInfo.signatureAuthor doit valoir ECO_ORGANISME).
  """
  signedByTransporter(
    "ID d'un BSD"
    id: ID!
    "Informations liées aux signatures transporteur et émetteur (case 8 et 9)"
    signingInfo: TransporterSignatureFormInput!
  ): Form

  "Valide la réception d'un BSD d'un entreposage provisoire ou reconditionnement"
  markAsTempStored(id: ID!, tempStoredInfos: TempStoredFormInput!): Form

  "Valide la complétion des cadres 14 à 19 lors d'un entreposage provisoire ou reconditionnement"
  markAsResealed(id: ID!, resealedInfos: ResealedFormInput!): Form

  "Valide l'envoi du BSD après un entreposage provisoire ou reconditionnement"
  markAsResent(id: ID!, resentInfos: ResentFormInput!): Form
    @deprecated(
      reason: "Utiliser la mutation signedByTransporter permettant d'apposer les signatures du collecteur-transporteur (case 18) et de l'exploitant du site d'entreposage provisoire ou de reconditionnement (case 19)"
    )

  """
  Permet d'importer les informations d'un BSD papier dans Trackdéchet après la réalisation de l'opération
  de traitement. Le BSD signé papier original doit être conservé à l'installation de destination qui doit
  être en mesure de retrouver le bordereau papier correspondant à un bordereau numérique. Le champ `customId`
  de l'input peut-être utilisé pour faire le lien.
  """
  importPaperForm(input: ImportPaperFormInput!): Form

  "Prépare un nouveau segment de transport multimodal"
  prepareSegment(
    id: ID!
    siret: String!
    nextSegmentInfo: NextSegmentInfoInput!
  ): TransportSegment

  "Marque un segment de transport comme prêt à être emporté"
  markSegmentAsReadyToTakeOver(id: ID!): TransportSegment

  "Marque un segment comme pris en charge par le nouveau transporteur"
  takeOverSegment(id: ID!, takeOverInfo: TakeOverInput!): TransportSegment

  "Édite un segment existant"
  editSegment(
    id: ID!
    siret: String!
    nextSegmentInfo: NextSegmentInfoInput!
  ): TransportSegment
}

type Subscription {
  """
  DEPRECATED - Privilégier l'utilisation d'un polling régulier sur la query `formsLifeCycle`

  Permet de s'abonner aux changements de statuts d'un BSD
  """
  forms(
    "Token permettant de s'authentifier à l'API"
    token: String!
  ): FormSubscription
}

"""
DEPRECATED - Privilégier l'utilisation d'un polling régulier sur la query `formsLifeCycle`

Mise à jour d'un BSD
"""
type FormSubscription {
  "Type de mutation"
  mutation: String

  "BSD concerné"
  node: Form

  "Liste des champs mis à jour"
  updatedFields: [String]

  "Ancienne valeurs"
  previousValues: Form
}

"Différents statuts d'un BSD au cours de son cycle de vie"
enum FormStatus {
  """
  BSD à l'état de brouillon
  Des champs obligatoires peuvent manquer
  """
  DRAFT

  """
  BSD finalisé
  Les champs sont validés pour détecter des valeurs manquantes ou erronnées
  """
  SEALED

  "BSD envoyé vers l'établissement de destination"
  SENT

  "BSD reçu par l'établissement de destination"
  RECEIVED

  "BSD dont les déchets ont été traités"
  PROCESSED

  "BSD en attente de regroupement"
  AWAITING_GROUP

  "Regroupement effectué"
  GROUPED

  "Perte de traçabalité"
  NO_TRACEABILITY

  "Déchet refusé"
  REFUSED

  "Déchet arrivé sur le site d'entreposage ou reconditionnement"
  TEMP_STORED

  "Déchet avec les cadres 14-19 complétées (si besoin), prêt à partir du site d'entreposage ou reconditionnement"
  RESEALED

  "Déchet envoyé du site d'entreposage ou reconditionnement vers sa destination de traitement"
  RESENT
}

enum FormRole {
  "Les BSD's dont je suis transporteur"
  TRANSPORTER
  "Les BSD's dont je suis la destination de traitement"
  RECIPIENT
  "Les BSD's dont je suis l'émetteur"
  EMITTER
  "Les BSD's dont je suis le négociant"
  TRADER
  "Les BSD's dont je suis éco-organisme"
  ECO_ORGANISME
}

"""
Bordereau de suivi de déchets (BSD)
Version dématérialisée du [CERFA n°12571*01](https://www.service-public.fr/professionnels-entreprises/vosdroits/R14334)
"""
type Form {
  "Identifiant unique du bordereau."
  id: ID!

  """
  Identifiant lisible utilisé comme numéro sur le CERFA (case "Bordereau n°****").
  Il est possible de l'utiliser pour récupérer l'identifiant unique du bordereau via la query form,
  utilisé pour le reste des opérations.
  """
  readableId: String!

  """
  Identifiant personnalisé permettant de faire le lien avec un
  objet un système d'information tierce
  """
  customId: String

  """
  Permet de savoir si les données du BSD ont été importées depuis un
  bordereau signé papier via la mutation `importPaperForm`
  """
  isImportedFromPaper: Boolean!

  "Établissement émetteur/producteur du déchet (case 1)"
  emitter: Emitter

  "Établissement qui reçoit le déchet (case 2)"
  recipient: Recipient

  "Transporteur du déchet (case 8)"
  transporter: Transporter

  "Détails du déchet (case 3)"
  wasteDetails: WasteDetails

  "Négociant (case 7)"
  trader: Trader

  "Date de création du BSD"
  createdAt: DateTime

  "Date de la dernière modification du BSD"
  updatedAt: DateTime

  "Statut du BSD (brouillon, envoyé, reçu, traité, etc)"
  status: FormStatus!

  "Si oui ou non le BSD a été signé par un transporteur"
  signedByTransporter: Boolean

  "Date de l'envoi du déchet par l'émetteur (case 9)"
  sentAt: DateTime

  "Nom de la personne responsable de l'envoi du déchet (case 9)"
  sentBy: String

  "Statut d'acceptation du déchet (case 10)"
  wasteAcceptationStatus: String

  "Raison du refus (case 10)"
  wasteRefusalReason: String

  "Nom de la personne en charge de la réception du déchet (case 10)"
  receivedBy: String

  "Date à laquelle le déchet a été reçu (case 10)"
  receivedAt: DateTime

  "Date à laquelle le déchet a été accepté ou refusé (case 10)"
  signedAt: DateTime

  "Quantité réelle présentée (case 10)"
  quantityReceived: Float

  """
  Quantité actuellement connue en tonnes.
  Elle est calculée en fonction des autres champs pour renvoyer la dernière quantité connue.
  Elle renvoi ainsi soit la quantité envoyée estimée, soit la quantitée recue sur le site d'entreposage, soit la quantitée réelle recue.
  """
  actualQuantity: Float

  "Traitement réalisé (code D/R)"
  processingOperationDone: String

  "Description de l'opération d’élimination / valorisation (case 11)"
  processingOperationDescription: String

  "Personne en charge du traitement"
  processedBy: String

  "Date à laquelle le déchet a été traité"
  processedAt: DateTime

  "Si oui ou non il y a eu perte de traçabalité"
  noTraceability: Boolean

  "Destination ultérieure prévue (case 12)"
  nextDestination: NextDestination

  "Annexe 2"
  appendix2Forms: [Form!]

  ecoOrganisme: FormEcoOrganisme

  "BSD suite - détail des champs de la partie entreposage provisoire ou reconditionnement"
  temporaryStorageDetail: TemporaryStorageDetail

  "Résumé des valeurs clés du bordereau à l'instant T"
  stateSummary: StateSummary

  transportSegments: [TransportSegment!]

  currentTransporterSiret: String
  nextTransporterSiret: String
}

"""
En fonction du statut du bordereau, différentes informations sont à lire pour connaitre vraiment l'étast du bordereau:
- la quantité peut changer entre émission, réception, entreposage provisoire...
- le bordereau peut naviguer entre plusieurs entreprises.
- quand le bordereau a-t-il été modifié pour la dernière fois ? (création, signature, traitement... ?)
- si c'est un bordereau avec conditionnement et qu'on attend un transporteur, quel est-il ?

Cet objet `StateSummary` vise à simplifier ces questions. Il renverra toujours la valeur pour un instant T donné.
"""
type StateSummary {
  "Quantité la plus à jour"
  quantity: Float

  "DEPRECATED Packaging le plus à jour"
  packagings: [Packagings!]! @deprecated(reason: "Utiliser packagingInfos")

  "Packaging le plus à jour"
  packagingInfos: [PackagingInfo!]!

  "Code ONU le plus à jour"
  onuCode: String

  "Prochaine entreprise à transporter le déchet (entreprise en case 8 ou 18)"
  transporter: FormCompany

  "Numéro de plaque d'immatriculation"
  transporterNumberPlate: String

  "Information libre, destinée aux transporteurs"
  transporterCustomInfo: String

  "Prochaine entreprise à recevoir le déchet (entreprise en case 2 ou 14)"
  recipient: FormCompany

  "Prochaine entreprise à émettre le déchet (entreprise en case 1 ou 13)"
  emitter: FormCompany

  "Date de la dernière action sur le bordereau"
  lastActionOn: DateTime
}

"Données du BSD suite sur la partie entreposage provisoire ou reconditionnement, rattachées à un BSD existant"
type TemporaryStorageDetail {
  "Établissement qui stocke temporairement le déchet (case 13)"
  temporaryStorer: TemporaryStorer

  """
  Installation de destination prévue (case 14) à remplir par le producteur ou
  le site d'entreposage provisoire
  """
  destination: Destination

  "Détails du déchet (cases 15, 16 et 17)"
  wasteDetails: WasteDetails

  "Transporteur du déchet (case 18)"
  transporter: Transporter

  "Nom du signataire du BSD suite  (case 19)"
  signedBy: String
  "Date de signature du BSD suite (case 19)"
  signedAt: DateTime
}

type TemporaryStorer {
  quantityType: QuantityType
  quantityReceived: Float
  wasteAcceptationStatus: String
  wasteRefusalReason: String

  receivedAt: DateTime
  receivedBy: String
}

type Destination {
  "N° de CAP (le cas échéant)"
  cap: String

  "Opération d'élimination / valorisation prévue (code D/R)"
  processingOperation: String

  "Établissement de destination"
  company: FormCompany

  "Indique si l'information a été saisie par l'émetteur du bordereau ou l'installation d'entreposage"
  isFilledByEmitter: Boolean
}

"Information sur un établissement dans un BSD"
type FormCompany {
  "Nom de l'établissement"
  name: String

  "SIRET de l'établissement"
  siret: String

  "Adresse de l'établissement"
  address: String

  """
  Code ISO 3166-1 alpha-2 du pays d'origine de l'entreprise :
  https://fr.wikipedia.org/wiki/ISO_3166-1_alpha-2

  Seul la destination ultérieure case 12 (`form.nextDestination.company`) peut être à l'étranger.
  """
  country: String

  "Nom du contact dans l'établissement"
  contact: String

  "Numéro de téléphone de contact dans l'établissement"
  phone: String

  "Email du contact dans l'établissement"
  mail: String
}

"Information sur l'éco-organisme responsable du BSD"
type FormEcoOrganisme {
  name: String!
  siret: String!
}

"Types d'émetteur de déchet (choix multiple de la case 1)"
enum EmitterType {
  "Producetur de déchet"
  PRODUCER

  "Autre détenteur"
  OTHER

  "Collecteur de petites quantités de déchets relevant de la même rubrique"
  APPENDIX1

  "Personne ayant transformé ou réalisé un traitement dont la provenance des déchets reste identifiable"
  APPENDIX2
}

"Informations sur une adresse chantier"
type WorkSite {
  name: String
  address: String
  city: String
  postalCode: String
  infos: String
}

"Émetteur du BSD (case 1)"
type Emitter {
  "Type d'émetteur"
  type: EmitterType

  "Adresse du chantier"
  workSite: WorkSite

  "DEPRECATED - Ancienne adresse chantier"
  pickupSite: String
    @deprecated(reason: "Migration vers `workSite` obligatoire")

  "Établissement émetteur"
  company: FormCompany
}

"""
Installation de destination ou d'entreprosage
ou de reconditionnement prévue (case 2)
"""
type Recipient {
  "N° de CAP (le cas échéant)"
  cap: String

  "Opération d'élimination / valorisation prévue (code D/R)"
  processingOperation: String

  "Établissement de destination"
  company: FormCompany

  "Indique si c'est un établissement d'entreposage temporaire ou de reocnditionnement"
  isTempStorage: Boolean
}

"Collecteur - transporteur (case 8)"
type Transporter {
  "Établissement collecteur - transporteur"
  company: FormCompany

  "Exemption de récipissé"
  isExemptedOfReceipt: Boolean

  "N° de récipissé"
  receipt: String

  "Département"
  department: String

  "Limite de validité du récipissé"
  validityLimit: DateTime

  "Numéro de plaque d'immatriculation"
  numberPlate: String

  "Information libre, destinée aux transporteurs"
  customInfo: String
}

"Destination ultérieure prévue (case 12)"
type NextDestination {
  "Traitement prévue (code D/R)"
  processingOperation: String

  "Établissement ultérieure"
  company: FormCompany
}

"Type de quantité lors de l'émission"
enum QuantityType {
  "Quntité réelle"
  REAL

  "Quantité estimée"
  ESTIMATED
}

"Type de packaging du déchet"
enum Packagings {
  "Fut"
  FUT

  "GRV"
  GRV

  "Citerne"
  CITERNE

  "Benne"
  BENNE

  "Autre"
  AUTRE
}

"Consistance du déchet"
enum Consistence {
  "Solide"
  SOLID

  "Liquide"
  LIQUID

  "Gazeux"
  GASEOUS

  "Pâteux"
  DOUGHY
}

"Informations sur le conditionnement"
type PackagingInfo {
  "Type de conditionnement"
  type: Packagings!

  "Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"
  other: String

  "Nombre de colis associés à ce conditionnement"
  quantity: Int!
}

"Détails du déchet (case 3, 4, 5, 6)"
type WasteDetails {
  "Rubrique déchet au format |_|_| |_|_| |_|_| (*)"
  code: String

  "Dénomination usuelle"
  name: String

  "Code ONU"
  onuCode: String

  "Conditionnements"
  packagingInfos: [PackagingInfo!]

  "Conditionnement"
  packagings: [Packagings!] @deprecated(reason: "Utiliser `packagingInfos`")

  "Autre packaging (préciser)"
  otherPackaging: String @deprecated(reason: "Utiliser `packagingInfos`")

  "Nombre de colis"
  numberOfPackages: Int @deprecated(reason: "Utiliser `packagingInfos`")

  "Quantité en tonnes"
  quantity: Float

  "Réelle ou estimée"
  quantityType: QuantityType

  "Consistance"
  consistence: Consistence
}

"Négociant (case 7)"
type Trader {
  "Établissement négociant"
  company: FormCompany

  "N° de récipissé"
  receipt: String

  "Département"
  department: String

  "Limite de validité"
  validityLimit: DateTime
}

"Statistiques d'un établissement"
type CompanyStat {
  "Établissement"
  company: FormCompany

  "Liste des statistiques"
  stats: [Stat!]!
}

"Statistiques"
type Stat {
  "Code déchet"
  wasteCode: String!

  "Quantité entrante"
  incoming: Float!

  "Qantité sortante"
  outgoing: Float!
}

"""
URL de téléchargement accompagné d'un token
permettant de valider le téléchargement.
"""
type FileDownload {
  "Token ayant une durée de validité de 10s"
  token: String

  "Lien de téléchargement"
  downloadLink: String
}

"""
Modèle de registre réglementaire tels que décrits dans l'arrêté du 29 février 2012 fixant
le contenu des registres mnetionnées aux articles R. 541-43 et R. 541-46 du code de l'environnement
https://www.legifrance.gouv.fr/affichTexte.do?cidTexte=JORFTEXT000025454959&categorieLien=id
"""
enum FormsRegisterExportType {
  """
  Registre exhaustif, déchets entrants et sortants
  """
  ALL

  """
  Registre producteur, déchets sortants
  Art 1: Les exploitants des établissements produisant ou expédiant des déchets tiennent à jour
  un registre chronologique où sont consignés tous les déchets sortants.
  """
  OUTGOING

  """
  Registre traiteur, TTR
  Art 2: Les exploitants des installations de transit, de regroupement ou de traitement de déchets,
  notamment de tri, établissent et tiennent à jour un registre chronologique où sont consignés
  tous les déchets entrants.
  """
  INCOMING

  """
  Registre transporteur
  Art 3: Les transporteurs et les collecteurs de déchets tiennent à jour un registre chronologique
  des déchets transportés ou collectés.
  """
  TRANSPORTED

  """
  Registre négociants
  Art 4: Les négociants tiennent à jour un registre chronologique des déchets détenus.
  """
  TRADED
}

"""
Format de l'export du registre
"""
enum FormsRegisterExportFormat {
  """
  Fichier csv
  """
  CSV
  """
  Fichier Excel
  """
  XLSX
}

"Information sur un BSD dans les logs de modifications de statuts"
type StatusLogForm {
  "Identifiant du BSD"
  id: ID

  "N° du bordereau"
  readableId: String
    @deprecated(
      reason: "Le readableId apparaît sur le CERFA mais l'id doit être utilisé comme identifiant."
    )
}

"Utilisateur ayant modifié le BSD"
type StatusLogUser {
  id: ID
  email: String
}

"Changement de statut d'un bordereau"
type StatusLog {
  "Identifiant du log"
  id: ID

  "Statut du bordereau après le changement de statut"
  status: FormStatus

  "Date à laquelle le changement de statut a été effectué"
  loggedAt: DateTime

  "Valeur des champs transmis lors du changement de statut (eg. receivedBY, processingOperationDescription)"
  updatedFields: JSON

  "BSD concerné"
  form: StatusLogForm

  "Utilisateur à l'origine de la modification"
  user: StatusLogUser
}

"Informations du cycle de vie des bordereaux"
type formsLifeCycleData {
  "Liste des changements de statuts"
  statusLogs: [StatusLog!]!

  "pagination, indique si d'autres pages existent après"
  hasNextPage: Boolean

  "pagination, indique si d'autres pages existent avant"
  hasPreviousPage: Boolean

  "Premier id de la page, à passer dans cursorAfter ou cursorBefore de la query formsLifeCycle"
  startCursor: ID

  "Dernier ID de la page, à passer dans cursorAfter ou cursorBefore de la query formsLifeCycle"
  endCursor: ID

  "Nombre de changements de statuts renvoyés"
  count: Int
}

enum TransportMode {
  ROAD
  RAIL
  AIR
  RIVER
  SEA
}

type TransportSegment {
  id: ID!

  "Siret du transporteur précédent"
  previousTransporterCompanySiret: String

  "Transporteur du segment"
  transporter: Transporter

  "Mode de transport"
  mode: TransportMode

  "Date de prise en charge"
  takenOverAt: DateTime

  "Reponsable de la prise en charge"
  takenOverBy: String

  "Prêt à être pris en charge"
  readyToTakeOver: Boolean

  "Numéro du segment"
  segmentNumber: Int
}
