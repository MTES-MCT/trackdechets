scalar DateTime

type Query {
  form(id: ID): Form
  forms: [Form]
  stats: [CompanyStat]
  appendixForms(emitterSiret: String!, wasteCode: String!): [Form]
}

type Mutation {
  saveForm(formInput: FormInput!): Form
  deleteForm(id: ID!): Form
  duplicateForm(id: ID!): Form

  markAsSealed(id: ID): Form
  markAsSent(id: ID, sentInfo: SentFormInput!): Form
  markAsReceived(id: ID, receivedInfo: ReceivedFormInput!): Form
  markAsProcessed(id: ID, processedInfo: ProcessedFormInput!): Form
}

type Subscription {
  forms(token: String!): FormSubscription
}

type FormSubscription {
  mutation: String
  node: Form
  updatedFields: [String]
  previousValues: Form
}

enum FormStatus {
  DRAFT
  SEALED
  SENT
  RECEIVED
  PROCESSED
  AWAITING_GROUP
  GROUPED
  NO_TRACEABILITY
}

type Form {
  id: ID
  readableId: String

  emitter: Emitter
  recipient: Recipient
  transporter: Transporter
  wasteDetails: WasteDetails
  trader: Trader

  createdAt: DateTime
  updatedAt: DateTime

  ownerId: Int
  status: FormStatus

  sentAt: DateTime
  sentBy: String

  isAccepted: Boolean
  receivedBy: String
  receivedAt: DateTime
  quantityReceived: Float

  processingOperationDone: String
  processedBy: String
  processedAt: DateTime
  noTraceability: Boolean
  nextDestinationProcessingOperation: String
  nextDestinationDetails: String

  appendix2Forms: [Form]
}

type FormCompany {
  name: String
  siret: String
  address: String
  contact: String
  phone: String
  mail: String
}

enum EmitterType {
  PRODUCER
  OTHER
  APPENDIX1
  APPENDIX2
}

type Emitter {
  type: EmitterType
  pickupSite: String

  company: FormCompany
}

type Recipient {
  cap: String
  processingOperation: String

  company: FormCompany
}

type Transporter {
  company: FormCompany

  receipt: String
  department: String
  validityLimit: DateTime
  numberPlate: String
}

enum QuantityType {
  REAL
  ESTIMATED
}

enum Packagings {
  FUT
  GRV
  CITERNE
  BENNE
  AUTRE
}

enum Consistence {
  SOLID
  LIQUID
  GASEOUS
}

type WasteDetails {
  code: String
  name: String
  onuCode: String
  packagings: [Packagings]
  otherPackaging: String
  numberOfPackages: Int
  quantity: Float
  quantityType: QuantityType
  consistence: Consistence
}

type Trader {
  company: FormCompany

  receipt: String
  department: String
  validityLimit: DateTime
}

type CompanyStat {
  company: FormCompany
  stats: [Stat]
}

type Stat {
  wasteCode: String
  incoming: Float
  outgoing: Float
}
