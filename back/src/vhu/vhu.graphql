type Query {
  bsvhu(id: ID!): Bsvhu!
  bsvhus(
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Curseur après lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus récents
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    after: ID

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `cursorAfter` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Nombre de bordereaux retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des bordereaux les plus anciens aux bordereaux les plus récents)
    Curseur avant lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    before: ID

    """
    (Optionnel) PAGINATION
    Nombre de bordereaux retournés avant le `cursorBefore`
    Défaut à 50, maximum à 500
    """
    last: Int

    "SIRET d'un établissement dont je suis membre"
    siret: String

    where: BsvhuWhere
  ): BsvhuConnection!

  """
  Renvoie un token pour télécharger un pdf de bordereau
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  bsvhuPdf("ID d'un bordereau" id: ID): FileDownload!
}

type Mutation {
  createBsvhu(input: BsvhuInput!): Bsvhu
  updateBsvhu(id: ID!, input: BsvhuInput!): Bsvhu
  signBsvhu(id: ID!, input: BsvhuSignatureInput!): Bsvhu

  "Duplique un BSD VHU"
  duplicateBsvhu("ID d'un BSD" id: ID!): Bsvhu
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type BsvhuConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [BsvhuEdge!]!
}

type BsvhuEdge {
  cursor: String!
  node: Bsvhu!
}

input BsvhuWhere {
  "(Optionnel) Permet de récupérer uniquement les bordereaux en brouillon"
  isDraft: Boolean

  """
  (Optionnel) Filtre sur le statut des bordereaux
  Si aucun filtre n'est passé, les bordereaux seront retournés quel que soit leur statut
  Défaut à vide.
  """
  status: BsvhuStatus

  createdAt: DateFilter
  updatedAt: DateFilter
  emitter: BsBsvhuEmitterWhere
  transporter: BsBsvhuTransporterWhere
  recipient: BsBsvhuRecipientWhere
  _and: [BsvhuWhere!]
  _or: [BsvhuWhere!]
  _not: [BsvhuWhere!]
}

input DateFilter {
  _gte: DateTime
  _gt: DateTime
  _lte: DateTime
  _lt: DateTime
}

input BsBsvhuEmitterWhere {
  company: BsvhuCompanyWhere
  signature: BsvhuSignatureWhere
}

input BsBsvhuTransporterWhere {
  company: BsvhuCompanyWhere
  signature: BsvhuSignatureWhere
}

input BsBsvhuRecipientWhere {
  company: BsvhuCompanyWhere
  signature: BsvhuSignatureWhere
}

input BsvhuCompanyWhere {
  siret: String!
}

input BsvhuSignatureWhere {
  date: DateFilter!
}

type BsvhuMetadata {
  errors: [BsvhuError!]!
}

type BsvhuError {
  message: String!
  path: String!
  requiredFor: SignatureTypeInput!
}

type Bsvhu {
  "Identifiant interne"
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  "Indique si le bordereau a été supprimé"
  isDeleted: Boolean!
  "Indique si le bordereau est à l'état de brouillon"
  isDraft: Boolean!
  "Status du bordereau"
  status: BsvhuStatus!
  "Numéro unique attribué par Trackdéchets"
  readableId: String!

  "Informations sur l'émetteur"
  emitter: BsvhuEmitter

  "Code déchet. Presque toujours 16 01 06"
  wasteCode: String
  "Conditionnement du déchet"
  packaging: BsvhuPackaging
  "Identification des VHUs"
  identification: BsvhuIdentification
  "Quantité de VHUs"
  quantity: BsvhuQuantity

  "Détails sur la destination"
  recipient: BsvhuRecipient
  "Détails sur le transporteur"
  transporter: BsvhuTransporter

  metadata: BsvhuMetadata!
}

type BsvhuEmitter {
  "Numéro d'agrément émetteur"
  agrementNumber: String
  "Coordonnées de l'entreprise émétrice"
  company: FormCompany
  signature: Signature
}

enum BsvhuStatus {
  IN_PROGRESS
  DONE
}

enum BsvhuPackaging {
  UNITE
  LOT
}

enum BsvhuIdentificationType {
  NUMERO_ORDRE_REGISTRE_POLICE
  NUMERO_ORDRE_LOTS_SORTANTS
}

enum BsvhuRecipientType {
  BROYEUR
  DEMOLISSEUR
}

type BsvhuTransporter {
  "Coordonnées de l'entreprise de transport"
  company: FormCompany
  "Numéro de TVA intracommunautaire, dans le cas d'un transporteur étranger"
  tvaIntracommunautaire: String

  "Récépissé transporteur"
  recepisse: BsvhuRecepisse

  signature: Signature
}

type BsvhuRecepisse {
  number: String
  department: String
  validityLimit: DateTime
}

type BsvhuRecipient {
  "Type de receveur: broyeur ou second centre VHU"
  type: BsvhuRecipientType
  "Numéro d'agrément de receveur"
  agrementNumber: String
  "Coordonnées de l'entreprise qui recoit les déchets"
  company: FormCompany

  "Informations d'acceptation"
  acceptance: BsvhuRecipientAcceptance
  "Informations sur l'opétation de traitement"
  operation: BsvhuRecipientOperation

  "Coordonnées de l'entreprise de broyage prévue. Utilisé uniquement lorsque le receveur est lui même un centre VHU."
  plannedBroyeurCompany: FormCompany

  signature: Signature
}

type BsvhuRecipientAcceptance {
  "Quantité réelle reçue"
  quantity: Float
  "Etat d'acceptation du déchet"
  status: String
  "Raison du refus du déchet, dans le cas d'un refus"
  refusalReason: String
  "Identification éventuelle des VHU à la reception (numéro de lots ou d'ordre)"
  identification: BsvhuIdentification
}

type BsvhuRecipientOperation {
  "Opération de traitement prévue"
  planned: String
  "Opération de traitement réalisée"
  done: String
}

type Signature {
  date: DateTime
  author: String
}

type BsvhuIdentification {
  numbers: [String]
  type: BsvhuIdentificationType
}

type BsvhuQuantity {
  number: Int
  tons: Float
}
