type Query {
  "EXPERIMENTAL - Ne pas utiliser dans un contexte de production"
  bsvhu(id: ID!): Bsvhu!

  "EXPERIMENTAL - Ne pas utiliser dans un contexte de production"
  bsvhus(
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Curseur après lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus récents
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    after: ID

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `cursorAfter` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Nombre de bordereaux retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des bordereaux les plus anciens aux bordereaux les plus récents)
    Curseur avant lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    before: ID

    """
    (Optionnel) PAGINATION
    Nombre de bordereaux retournés avant le `cursorBefore`
    Défaut à 50, maximum à 500
    """
    last: Int

    "SIRET d'un établissement dont je suis membre"
    siret: String!

    where: BsvhuWhere
  ): BsvhuConnection!

  """
  Renvoie un token pour télécharger un pdf de bordereau
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  bsvhuPdf("ID d'un bordereau" id: ID): FileDownload!
}

type Mutation {
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un BSVHU
  """
  createBsvhu(input: BsvhuInput!): Bsvhu

  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un BSVHU en brouillon
  """
  createDraftBsvhu(input: BsvhuInput!): Bsvhu

  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Met à jour un BSVHU
  """
  updateBsvhu(id: ID!, input: BsvhuInput!): Bsvhu

  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Permet de publier un brouillon pour le marquer comme prêt à être envoyé
  """
  publishBsvhu(id: ID!): Bsvhu

  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Signe un BSVHU
  """
  signBsvhu(id: ID!, input: BsvhuSignatureInput!): Bsvhu

  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Duplique un BSVHU
  """
  duplicateBsvhu("ID d'un BSD" id: ID!): Bsvhu
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type BsvhuConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [BsvhuEdge!]!
}

type BsvhuEdge {
  cursor: String!
  node: Bsvhu!
}

input BsvhuWhere {
  "(Optionnel) Permet de récupérer uniquement les bordereaux en brouillon"
  isDraft: Boolean

  """
  (Optionnel) Filtre sur le statut des bordereaux
  Si aucun filtre n'est passé, les bordereaux seront retournés quel que soit leur statut
  Défaut à vide.
  """
  status: BsvhuStatus

  createdAt: DateFilter
  updatedAt: DateFilter
  emitter: BsvhuEmitterWhere
  transporter: BsvhuTransporterWhere
  destination: BsvhuDestinationWhere
  _and: [BsvhuWhere!]
  _or: [BsvhuWhere!]
  _not: [BsvhuWhere!]
}

input DateFilter {
  _gte: DateTime
  _gt: DateTime
  _lte: DateTime
  _lt: DateTime
  _eq: DateTime
}

input BsvhuEmitterWhere {
  company: BsvhuCompanyWhere
  signature: BsvhuSignatureWhere
}

input BsvhuTransporterWhere {
  company: BsvhuCompanyWhere
  signature: BsvhuSignatureWhere
}

input BsvhuDestinationWhere {
  company: BsvhuCompanyWhere
  signature: BsvhuSignatureWhere
}

input BsvhuCompanyWhere {
  siret: String!
}

input BsvhuSignatureWhere {
  date: DateFilter!
}

type BsvhuMetadata {
  errors: [BsvhuError!]!
}

type BsvhuError {
  message: String!
  path: String!
  requiredFor: SignatureTypeInput!
}

type Bsvhu {
  "Numéro unique attribué par Trackdéchets"
  id: String!
  "Date de création"
  createdAt: DateTime!
  "Date de dernière modification"
  updatedAt: DateTime!
  "Indique si le bordereau est à l'état de brouillon"
  isDraft: Boolean!
  "Status du bordereau"
  status: BsvhuStatus!

  "Émetteur du bordereau"
  emitter: BsvhuEmitter

  "Code déchet. Presque toujours 16 01 06"
  wasteCode: String
  "Conditionnement du déchet"
  packaging: BsvhuPackaging
  "Identification des VHUs"
  identification: BsvhuIdentification
  "Quantité de VHUs"
  quantity: BsvhuQuantity

  "Destinataire du bordereau"
  destination: BsvhuDestination
  "Transporteur"
  transporter: BsvhuTransporter

  metadata: BsvhuMetadata!
}

type BsvhuEmitter {
  "Numéro d'agrément émetteur"
  agrementNumber: String
  "Coordonnées de l'entreprise émétrice"
  company: FormCompany
  "Déclaration générale de l'émetteur du bordereau"
  emission: BsvhuEmission
}

type BsvhuEmission {
  signature: Signature
}

enum BsvhuStatus {
  INITIAL
  SIGNED_BY_PRODUCER
  SENT
  PROCESSED
  REFUSED
}

enum BsvhuPackaging {
  UNITE
  LOT
}

enum BsvhuIdentificationType {
  NUMERO_ORDRE_REGISTRE_POLICE
  NUMERO_ORDRE_LOTS_SORTANTS
}

enum BsvhuDestinationType {
  BROYEUR
  DEMOLISSEUR
}

type BsvhuTransporter {
  "Coordonnées de l'entreprise de transport"
  company: FormCompany
  "Récépissé transporteur"
  recepisse: BsvhuRecepisse
  "Informations liés au transport"
  transport: BsvhuTransport
}

type BsvhuTransport {
  "Date de prise en charge"
  takenOverAt: DateTime
  signature: Signature
}

type BsvhuRecepisse {
  number: String
  department: String
  validityLimit: DateTime
}

type BsvhuDestination {
  "Type de receveur: broyeur ou second centre VHU"
  type: BsvhuDestinationType
  "Numéro d'agrément de receveur"
  agrementNumber: String
  "Coordonnées de l'entreprise qui recoit les déchets"
  company: FormCompany
  "Opération d'élimination / valorisation prévue (code D/R)"
  plannedOperationCode: String

  "Informations de réception"
  reception: BsvhuReception
  "Informations sur l'opétation de traitement"
  operation: BsvhuOperation
}

type BsvhuReception {
  "Date de présentation sur site"
  date: DateTime
  "Quantité réelle reçue"
  quantity: BsvhuQuantity
  "Lot accepté oui/non"
  acceptationStatus: BsvhuAcceptationStatus
  "Motif de refus"
  refusalReason: String
  "Identification éventuelle des VHU à la reception (numéro de lots ou d'ordre)"
  identification: BsvhuIdentification
}

type BsvhuOperation {
  "Date de réalisation"
  date: DateTime
  "Opération de traitement réalisée (R4 ou R12)"
  code: String
  "Broyeur de destination, à remplir uniquement lorsque la destination est lui même un centre VHU"
  nextDestination: BsvhuNextDestination
  signature: Signature
}

type BsvhuNextDestination {
  company: FormCompany
}

type Signature {
  date: DateTime
  author: String
}

type BsvhuIdentification {
  numbers: [String]
  type: BsvhuIdentificationType
}

type BsvhuQuantity {
  number: Int
  tons: Float
}

enum BsvhuAcceptationStatus {
  ACCEPTED
  REFUSED
  PARTIALLY_REFUSED
}
