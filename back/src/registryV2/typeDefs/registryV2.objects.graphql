type RegistryV2ExportConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RegistryV2ExportEdge!]!
}

type RegistryV2ExportEdge {
  cursor: String!
  node: RegistryV2Export!
}

type RegistryV2Export {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  status: RegistryExportStatus!
  delegate: RegistryCompany
  delegateSirets: String
  sirets: [String!]!
  companies: [RegistryCompany!]!
  registryType: RegistryV2ExportType!
  wasteTypes: [WasteType!]
  wasteCodes: [String!]
  declarationType: DeclarationType!
  startDate: DateTime!
  endDate: DateTime
  format: RegistryExportFormat!
}

type RegistryExhaustiveExportConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RegistryExhaustiveExportEdge!]!
}

type RegistryExhaustiveExportEdge {
  cursor: String!
  node: RegistryExhaustiveExport!
}

type RegistryExhaustiveExport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  status: RegistryExportStatus!
  sirets: [String!]!
  companies: [RegistryCompany!]!
  startDate: DateTime!
  endDate: DateTime
  format: RegistryExportFormat!
}

type RegistryCompany {
  "Raison sociale de l'établissement"
  name: String
  "Nom de l'établissement"
  givenName: String
  "SIRET de l'établissement"
  siret: String
  "SIRET ou num de TVA de l'établissement"
  orgId: String
  "Liste des permissions de l'utilisateur authentifié au sein de cet établissement"
  userPermissions: [UserPermission!]!
}

type RegistryImportConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RegistryImportEdge!]!
}

type RegistryImportEdge {
  cursor: String!
  node: RegistryImport!
}

type RegistryImport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: RegistryImportStatus!
  type: RegistryImportType!
  s3FileKey: String!
  originalFileName: String!
  numberOfErrors: Int!
  numberOfInsertions: Int!
  numberOfEdits: Int!
  numberOfCancellations: Int!
  numberOfSkipped: Int!
  createdBy: User!
  associations: [RegistryImportAssociation!]!
}

type RegistryImportAssociation {
  reportedFor: RegistryCompany!
  reportedAs: RegistryCompany!
}

type RegistryIssue {
  code: String!
  message: String!
  path: String!
}

type RegistryLineError {
  publicId: String!
  message: String!
  issues: [RegistryIssue!]!
}

type AddRegistryLinesStats {
  errors: Int!
  insertions: Int!
  edits: Int!
  cancellations: Int!
  skipped: Int!
}

type AddRegistryLine {
  publicId: ID!
}

type AddRegistryLinesResponse {
  stats: AddRegistryLinesStats!
  errors: [RegistryLineError!]
  # Liste des identifiants (`publicId`) des déclarations qui ont été insérées
  inserted: [AddRegistryLine!]!
  # Liste des identifiants (`publicId`) des déclarations qui ont été modifiées
  edited: [AddRegistryLine!]!
  # Liste des identifiants (`publicId`) des déclarations qui ont été annulées
  cancelled: [AddRegistryLine!]!
  # Liste des identifiants (`publicId`) des déclarations qui ont été ignorées
  skipped: [AddRegistryLine!]!
}

type CancelRegistryV2LineResponse {
  publicIds: [ID!]!
}

"""
Permet de récupérer l'ensemble des déclarations au registre RNDTS.
"""
type RegistryLookup {
  "publicId de la déclaration associée"
  publicId: ID!
  "type de registre dans lequel apparaît cette déclaration"
  type: RegistryImportType!
  "SIRET de l'établissement visé par la déclaration (reportForSiret)"
  siret: String!
  "SIRET de l'établissement qui a fait la déclaration (reportAsSiret), null si c'est le même que l'établissement visé"
  reportAsSiret: String
  "Date de l'action déclarée"
  date: DateTime!
  "Date de la déclaration"
  declaredAt: DateTime!
  "Code de déchets"
  wasteCode: String
  "établissement qui a fait la déclaration"
  reportFor: RegistryCompany
  "établissement qui a fait la déclaration"
  reportAs: RegistryCompany
  "Déclaration SSD: contient la ligne de registre si il s'agit d'une déclaration SSD"
  ssd: SsdLine
  "Déclaration de réception de déchets: contient la ligne de registre si il s'agit d'une déclaration de réception de déchets"
  incomingWaste: IncomingWasteLine
  "Déclaration de réception de terres et sédiments: contient la ligne de registre si il s'agit d'une déclaration de réception de terres et sédiments"
  incomingTexs: IncomingTexsLine
  "Déclaration d'expédition de déchets: contient la ligne de registre si il s'agit d'une déclaration d'expédition de déchets"
  outgoingWaste: OutgoingWasteLine
  "Déclaration d'expédition de terres et sédiments: contient la ligne de registre si il s'agit d'une déclaration d'expédition de terres et sédiments"
  outgoingTexs: OutgoingTexsLine
  "Déclaration de gestion de déchets: contient la ligne de registre si il s'agit d'une déclaration de gestion de déchets"
  managedWaste: ManagedLine
  "Déclaration de transport de déchets: contient la ligne de registre si il s'agit d'une déclaration de transport de déchets"
  transportedWaste: TransportedLine
}

type RegistryLookupConnection {
  pageInfo: PageInfo!
  edges: [RegistryLookupEdge!]!
}

type RegistryLookupEdge {
  cursor: String!
  node: RegistryLookup!
}

type RegistryTexsAnalysisFile {
  id: ID!
  createdAt: DateTime!
  s3FileKey: String!
  originalFileName: String!
}
