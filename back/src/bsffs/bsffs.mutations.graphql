type Mutation {
  """
  Mutation permettant de créer un nouveau bordereau de suivi de fluides frigorigènes.
  """
  createBsff(input: BsffInput!): Bsff!

  """
  Mutation permettant de modifier un bordereau existant de suivi de fluides frigorigènes.
  """
  updateBsff(id: ID!, input: BsffInput!): Bsff!

  """
  Mutation permettant de supprimer un bordereau existant de suivi de fluides frigorigènes.
  À condition qu'il n'ait pas encore été signé.
  """
  deleteBsff(id: ID!): Bsff!

  """
  Mutation permettant d'ajouter une fiche d'intervention à un bordereau existant.
  """
  addFicheInterventionBsff(
    id: ID!
    numero: String!
    input: BsffFicheInterventionInput!
  ): BsffFicheIntervention!

  """
  Mutation permettant de mettre à jour une fiche d'intervention lié à un bordereau existant.
  """
  updateFicheInterventionBsff(
    id: ID!
    numero: String!
    input: BsffFicheInterventionInput!
  ): BsffFicheIntervention!

  """
  Mutation permettant de supprimer une fiche d'intervention lié à un bordereau existant.
  """
  deleteFicheInterventionBsff(id: ID!, numero: String!): BsffFicheIntervention!

  """
  Mutation permettant d'apposer une signature sur le bordereau.
  """
  signBsff(
    id: ID!
    type: BsffSignatureType!
    signature: SignatureInput!
    securityCode: Int
  ): Bsff!
}

enum BsffSignatureType {
  EMISSION
  TRANSPORT
  RECEPTION
  OPERATION
}

input SignatureInput {
  date: DateTime!
  author: String!
}

input BsffInput {
  emitter: BsffEmitterInput
  packagings: [BsffPackagingInput!]
  waste: BsffWasteInput
  quantity: BsffQuantityInput
  transporter: BsffTransporterInput
  destination: BsffDestinationInput
  bsffs: [ID!]
}

input BsffEmitterInput {
  company: CompanyInput!
}

input BsffPackagingInput {
  numero: String!
  type: BsffPackagingType!
  litres: Float!
}

input BsffWasteInput {
  code: String!
  description: String!
  adr: String!
}

input BsffQuantityInput {
  kilos: Float!
  isEstimate: Boolean!
}

input BsffTransporterInput {
  company: CompanyInput!
  recepisse: BsffTransporterRecepisseInput
  transport: BsffTransporterTransportInput
}
input BsffTransporterRecepisseInput {
  number: String!
  department: String!
  validityLimit: DateTime!
}
input BsffTransporterTransportInput {
  mode: TransportMode!
}

input BsffDestinationInput {
  company: CompanyInput!
  cap: String
  reception: BsffDestinationReceptionInput
  plannedOperation: BsffDestinationPlannedOperationInput
  operation: BsffDestinationOperationInput
}
input BsffDestinationReceptionInput {
  date: DateTime!
  kilos: Float!
  refusal: String
}
input BsffDestinationPlannedOperationInput {
  code: BsffOperationCode!
  qualification: BsffOperationQualification!
}
input BsffDestinationOperationInput {
  code: BsffOperationCode!
  qualification: BsffOperationQualification!
  nextDestination: BsffOperationNextDestinationInput
}
input BsffOperationNextDestinationInput {
  company: CompanyInput!
}

input BsffFicheInterventionInput {
  kilos: Float!
  owner: BsffOwnerInput!
  postalCode: String!
}
input BsffOwnerInput {
  company: CompanyInput!
}
