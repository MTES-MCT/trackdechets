type Query {
  "Retourne un bordereau avec l'identifiant donné."
  bsff("Identifiant du bordereau à retrouver." id: ID!): Bsff!

  "Retourne un lien de téléchargement au format PDF du bordereau avec l'identifiant donné."
  bsffPdf("Identifiant du bordereau à retrouver." id: ID!): FileDownload!

  "Retourne tous les bordereaux de l'utilisateur connecté, en respectant les différents filtres."
  bsffs(
    "Retourne les bordereaux après celui qui correspond à l'identifiant donné."
    after: ID
    "Retourne les bordereaux avant celui qui correspond à l'identifiant donné."
    before: ID
    "Retourne les x premiers bordereaux."
    first: Int
    "Retourne les x derniers bordereaux."
    last: Int
    "Filtre les résultats d'après certains critères."
    where: BsffWhere
  ): BsffConnection!
}

"Filtres possibles pour la récupération de bordereaux."
input BsffWhere {
  "Filtrer sur le champ emitter."
  emitter: BsffWhereEmitter
  "Filtrer sur le champ transporter."
  transporter: BsffWhereTransporter
  "Filtrer sur le champ destination."
  destination: BsffWhereDestination
}

"Champs possible pour le filtre sur l'emitter."
input BsffWhereEmitter {
  company: BsffWhereCompany
}

"Champs possible pour le filtre sur transporter."
input BsffWhereTransporter {
  company: BsffWhereCompany
}

"Champs possible pour le filtre sur destination."
input BsffWhereDestination {
  company: BsffWhereCompany
  operation: BsffWhereOperation
}
"Champs possible pour le filtre sur l'opération."
input BsffWhereOperation {
  code: BsffOperationCode
  qualification: BsffOperationQualification
}

"Filtres sur une entreprise."
input BsffWhereCompany {
  siret: String!
}

"Résultats de bordereaux paginés."
type BsffConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [BsffEdge!]!
}

type BsffEdge {
  cursor: String!
  node: Bsff!
}
