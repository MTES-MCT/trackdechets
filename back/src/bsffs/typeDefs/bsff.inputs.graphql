"Filtres possibles pour la récupération de bordereaux."
input BsffWhere {
  "Filtrer sur le champ status."
  status: BsffStatus
  "Filtrer sur le champ emitter."
  emitter: BsffWhereEmitter
  "Filtrer sur le champ transporter."
  transporter: BsffWhereTransporter
  "Filtrer sur le champ destination."
  destination: BsffWhereDestination
}

"Champs possible pour le filtre sur l'emitter."
input BsffWhereEmitter {
  company: BsffWhereCompany
}

"Champs possible pour le filtre sur transporter."
input BsffWhereTransporter {
  company: BsffWhereCompany
}

"Champs possible pour le filtre sur destination."
input BsffWhereDestination {
  company: BsffWhereCompany
  operation: BsffWhereOperation
}

"Champs possible pour le filtre sur l'opération."
input BsffWhereOperation {
  code: BsffOperationCode
  code_in: [BsffOperationCode!]
}

"Filtres sur une entreprise."
input BsffWhereCompany {
  siret: String!
}

input SignatureInput {
  date: DateTime!
  author: String!
}

input BsffSplitInput {
  "Identifiant du bordereau initial inclus dans le groupement"
  bsffId: ID!
  """
  Portion du bordereau inclus dans le groupement. Laisser null si le bordereau est
  inclus dans sa totalité
  """
  weight: Float
}

input BsffInput {
  type: BsffType
  emitter: BsffEmitterInput
  packagings: [BsffPackagingInput!]
  waste: BsffWasteInput
  weight: BsffWeightInput
  transporter: BsffTransporterInput
  destination: BsffDestinationInput
  ficheInterventions: [ID!]
  "Bordereau que celui-ci reéxpédie"
  forwarding: ID
  "Liste des bordereaux que celui-ci reconditionne"
  repackaging: [ID!]
  "Liste des bordereaux que celui-ci groupe"
  grouping: [BsffSplitInput!]
}

input BsffEmitterInput {
  company: CompanyInput
  "Champ libre"
  customInfo: String
}

input BsffPackagingInput {
  "Dénomination du contenant."
  name: String!
  "Volume du contenant."
  volume: Float
  "Numéro du contenant."
  numero: String!
  "Poids en kilogrammes"
  weight: Float!
}

input BsffWasteInput {
  code: String!
  nature: String
  adr: String!
}

input BsffWeightInput {
  "Poids en kilogrammes"
  value: Float!
  isEstimate: Boolean!
}

input BsffTransporterInput {
  company: CompanyInput
  recepisse: BsffTransporterRecepisseInput
  transport: BsffTransporterTransportInput
  "Champ libre"
  customInfo: String
}
input BsffTransporterRecepisseInput {
  number: String!
  department: String!
  validityLimit: DateTime!
}
input BsffTransporterTransportInput {
  mode: TransportMode!
}

input BsffDestinationInput {
  company: CompanyInput
  cap: String
  reception: BsffDestinationReceptionInput
  plannedOperation: BsffDestinationPlannedOperationInput
  operation: BsffDestinationOperationInput
  "Champ libre"
  customInfo: String
}
input BsffDestinationReceptionInput {
  date: DateTime!
  "Poids en kilogrammes"
  weight: Float!
  acceptationStatus: BsffAcceptationStatus!
  refusalReason: String
}

input BsffDestinationPlannedOperationInput {
  code: BsffOperationCode!
}

input BsffOperationNextDestinationInput {
  company: CompanyInput!
}

input BsffDestinationOperationInput {
  code: BsffOperationCode!
  nextDestination: BsffOperationNextDestinationInput
}

input BsffFicheInterventionInput {
  numero: String!
  "Poids en kilogrammes"
  weight: Float!
  detenteur: BsffDetenteurInput!
  operateur: BsffOperateurInput!
  postalCode: String!
}
input BsffDetenteurInput {
  company: CompanyInput!
}
input BsffOperateurInput {
  company: CompanyInput!
}
