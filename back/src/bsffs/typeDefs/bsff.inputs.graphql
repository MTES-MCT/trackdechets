"Filtres possibles pour la récupération de bordereaux."
input BsffWhere {
  "Filtre sur l'ID"
  id: IdFilter
  "Filtre sur le statut de brouillon."
  isDraft: Boolean
  "Filtre sur le statt"
  status: BsffStatusFilter
  "Filtre sur la date de création"
  createdAt: DateFilter
  updatedAt: DateFilter
  "Filtre sur le champ emitter."
  emitter: BsffEmitterWhere
  "Filtre sur le champ transporter."
  transporter: BsffTransporterWhere
  "Filtre sur le champ destination."
  destination: BsffDestinationWhere
  "ET logique"
  _and: [BsffWhere!]
  "OU logique"
  _or: [BsffWhere!]
  "NON logique"
  _not: BsffWhere
}

"Filtre sur le statut"
input BsffStatusFilter {
  _eq: BsffStatus
  _in: [BsffStatus!]
}

"Filtre sur l'opération de traitement effectuée"
input BsffOperationCodeFilter {
  _eq: BsffOperationCode
  in: [BsffOperationCode!]
}

"Champs possible pour le filtre sur l'émetteur."
input BsffEmitterWhere {
  company: CompanyWhere
  emission: BsffEmissionWhere
}

"Champs possibles pour le filtre sur l'émission"
input BsffEmissionWhere {
  signature: SignatureWhere
}

"Champs possible pour le filtre sur le transporteur."
input BsffTransporterWhere {
  company: CompanyWhere
  transport: BsffTransportWhere
}

"Champs possible pour le filtre sur le transport."
input BsffTransportWhere {
  signature: SignatureWhere
}

"Champs possible pour le filtre sur la destination."
input BsffDestinationWhere {
  company: CompanyWhere
  reception: BsffReceptionWhere
  operation: BsffOperationWhere
}

"Champs possibles pour le filtre sur la réception"
input BsffReceptionWhere {
  signature: SignatureWhere
}

"Champs possible pour le filtre sur l'opération."
input BsffOperationWhere {
  code: BsffOperationCodeFilter
  signature: SignatureWhere
}

input SignatureInput {
  date: DateTime!
  author: String!
}

input BsffInput {
  type: BsffType
  emitter: BsffEmitterInput
  packagings: [BsffPackagingInput!]
  waste: BsffWasteInput
  quantity: BsffQuantityInput
  transporter: BsffTransporterInput
  destination: BsffDestinationInput
  ficheInterventions: [ID!]
  previousBsffs: [ID!]
}

input BsffEmitterInput {
  company: CompanyInput
}

input BsffPackagingInput {
  "Dénomination du contenant."
  name: String!
  "Volume du contenant."
  volume: Float
  "Numéro du contenant."
  numero: String!
  "Poids en kilos."
  kilos: Float!
}

input BsffWasteInput {
  code: String!
  nature: String
  adr: String!
}

input BsffQuantityInput {
  kilos: Float!
  isEstimate: Boolean!
}

input BsffTransporterInput {
  company: CompanyInput
  recepisse: BsffTransporterRecepisseInput
  transport: BsffTransporterTransportInput
}
input BsffTransporterRecepisseInput {
  number: String!
  department: String!
  validityLimit: DateTime!
}
input BsffTransporterTransportInput {
  mode: TransportMode!
}

input BsffDestinationInput {
  company: CompanyInput
  cap: String
  reception: BsffDestinationReceptionInput
  plannedOperation: BsffDestinationPlannedOperationInput
  operation: BsffDestinationOperationInput
}
input BsffDestinationReceptionInput {
  date: DateTime!
  kilos: Float!
  refusal: String
}

input BsffDestinationPlannedOperationInput {
  code: BsffOperationCode!
}

input BsffOperationNextDestinationInput {
  company: CompanyInput!
}

input BsffDestinationOperationInput {
  code: BsffOperationCode!
  nextDestination: BsffOperationNextDestinationInput
}

input BsffFicheInterventionInput {
  numero: String!
  kilos: Float!
  detenteur: BsffDetenteurInput!
  operateur: BsffOperateurInput!
  postalCode: String!
}
input BsffDetenteurInput {
  company: CompanyInput!
}
input BsffOperateurInput {
  company: CompanyInput!
}
