type Query {
  me: User
  apiKey: String
}

input SignupInput {
  email: String!
  password: String!
  name: String!
  phone: String
  siret: String!
  companyTypes: [CompanyType]
  gerepId: String
  codeNaf: String
  companyName: String
}

type Mutation {
  signup(payload: SignupInput): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  changePassword(oldPassword: String!, newPassword: String!): AuthPayload!
  resetPassword(email: String!): Boolean
  editProfile(name: String, phone: String, email: String): User
  inviteUserToCompany(email: String!, siret: String!, role: UserRole!): CompanyPrivate
  joinWithInvite(
    inviteHash: String!
    name: String!
    password: String!
  ): AuthPayload!
  removeUserFromCompany(userId: ID!, siret: String!):  CompanyPrivate
  deleteInvitation(userAccountHashId: ID!, siret: String!):  CompanyPrivate
}

type AuthPayload {
  token: String!
  user: User!
}

enum UserType {
  PRODUCER
  COLLECTOR
  WASTEPROCESSOR
  TRANSPORTER
  WASTE_VEHICLES
  WASTE_CENTER
  TRADER
}

enum UserRole {
  MEMBER
  ADMIN
}

type User {
  id: ID!
  email: String!
  name: String
  phone: String

  companies: [CompanyPrivate]
}
