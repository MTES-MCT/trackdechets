type BsdasriSignature {
  date: DateTime
  author: String
}

"Émetteur du Bsdasri, Personne responsable de l'émimination des déchets (PRED)"
type BsdasriEmitter {
  "Établissement émetteur"
  company: FormCompany
  "Site d'emport du déchet, si différent de celle de l'émetteur"
  pickupSite: PickupSite
  "Champ libre"
  customInfo: String

  "Agit pour le compte de l'éco organisme agréé"
  onBehalfOfEcoorganisme: Boolean!
  emission: BsdasriEmission
}

"Destination du Bsdasri"
type BsdasriDestination {
  """
  Installation destinataire
  """
  company: FormCompany

  "Champ libre"
  customInfo: String
  reception: BsdasriReception
  operation: BsdasriOperation
}

type BsdasriRecepisse {
  "Numéro de récépissé"
  number: String
  "Département"
  department: String
  "Date limite de validité"
  validityLimit: DateTime
}

"""
Collecteur transporteur
"""
type BsdasriTransporter {
  "Établissement de destination"
  company: FormCompany

  "Récépissé"
  recepisse: BsdasriRecepisse

  "Champ libre"
  customInfo: String

  transport: BsdasriTransport
}

"Informations sur le conditionnement Bsdasri"
type BsdasriPackagingInfo {
  "Type de conditionnement"
  type: BsdasriPackagings!

  "Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"
  other: String

  "Nombre de colis associés à ce conditionnement"
  quantity: Int!

  volume: Int!
}

"Informations sur un poids de déchet estimé ou pesé"
type BsdasriWeight {
  "Poids en kg, pesé ou estimé"
  value: Float!
  "Le poids est-il estimé (pesé si false)"
  isEstimate: Boolean!
}
"Informations sur un poids reçu (toujours pesé)"
type BsdasriOperationWeight {
  "Pois en kg (pesé)"
  value: Float!
}

"Informations relatives au déchet"
type BsdasriWaste {
  "Code adr"
  adr: String!
  "Code déchet"
  code: String!
}

"Informations relatives à l'acceptation ou au refus du déchet (Bsdasri)"
type BsdasriWasteAcceptation {
  status: String
  refusalReason: String
  refusedWeight: Float
}

"Informations relatives au transport du Bsdasri"
type BsdasriTransport {
  "Quantité transportée"
  weight: BsdasriWeight
  "Volume transporté"
  volume: Int
  "Conditionnement"
  packagingInfos: [BsdasriPackagingInfo!]
  wasteAcceptation: BsdasriWasteAcceptation
  handedOverAt: DateTime
  takenOverAt: DateTime
  signature: BsdasriSignature
  mode: TransportMode!
}

"Informations relatives au déchet émis"
type BsdasriEmission {
  "Quantité émise"
  weight: BsdasriWeight
  "Volume en litres"
  volume: Int
  "Conditionnement"
  packagingInfos: [BsdasriPackagingInfo!]
  signature: BsdasriSignature
  "Emporté sans signature PRED avec son autorisation prélalable"
  isTakenOverWithoutEmitterSignature: Boolean
  "Signature PRED avec code de sécurité"
  isTakenOverWithSecretCode: Boolean
}

"Informations relatives à la réception du Bsdasri"
type BsdasriReception {
  "Volume reçu"
  volume: Int
  "Conditionnement"
  packagingInfos: [BsdasriPackagingInfo!]
  wasteAcceptation: BsdasriWasteAcceptation
  "Date de réception du déchet"
  date: DateTime
  signature: BsdasriSignature
}

"Informations relatives au traitement du Bsdasri"
type BsdasriOperation {
  "Quantité traitée"
  weight: BsdasriOperationWeight
  "Code de l'opération de traitement"
  code: String
  "Date de l'opération de traitement"
  date: DateTime
  signature: BsdasriSignature
}
"Bordereau Bsdasri regroupé"
type InitialBsdasri {
  "Identifiant du bordereau regroupé "
  id: ID!
  "Nombre de contenants reçus"
  quantity: Int
  "Volume associé"
  volume: Int
  "Poids de déchets (en kg) traités"
  weight: Float
  "Date de collecte initiale"
  takenOverAt: DateTime
  "Code postal du lieu de collecte"
  postalCode: String
}
"Bordereau Bsdasri"
type Bsdasri {
  id: ID!
  status: BsdasriStatus!
  type: BsdasriType!
  createdAt: DateTime
  updatedAt: DateTime
  isDraft: Boolean!

  waste: BsdasriWaste

  emitter: BsdasriEmitter

  transporter: BsdasriTransporter

  destination: BsdasriDestination

  "Bordereaux regroupés"
  grouping: [InitialBsdasri!]

  metadata: BsdasriMetadata!

  allowDirectTakeOver: Boolean
}

type BsdasriError {
  message: String!
  path: String!
  requiredFor: [BsdasriSignatureType!]!
}
type BsdasriMetadata {
  errors: [BsdasriError]!
}

type BsdasriConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [BsdasriEdge!]!
}
type BsdasriEdge {
  cursor: String!
  node: Bsdasri!
}
