scalar DateTime

enum BsdasriRole {
  "Les Bsdasri dont je suis transporteur"
  TRANSPORTER
  "Les Bsdasri dont je suis la destination de traitement"
  RECIPIENT
  "Les Bsdasri dont je suis l'émetteur"
  EMITTER
}

enum BsdasriStatus {
  "Bsdasri dans son état initial"
  INITIAL

  "Optionnel, Bsdasri signé par la PRED (émetteur)"
  SIGNED_BY_PRODUCER

  "Bsdasri envoyé vers l'établissement de destination"
  SENT

  "Bsdasri reçu par l'établissement de destination"
  RECEIVED

  "Bsdasri dont les déchets ont été traités"
  PROCESSED

  "Déchet refusé"
  REFUSED
}

"Type de packaging du déchet"
enum BsdasriPackagings {
  "Caisse en carton avec sac en plastique"
  BOITE_CARTON

  "Fûts ou jerrican à usage unique"
  FUT

  "Boîtes et Mini-collecteurs pour déchets perforants"
  BOITE_PERFORANTS

  "Grand emballage"
  GRAND_EMBALLAGE

  "Grand récipient pour vrac"
  GRV

  "Autre"
  AUTRE
}

"Type d'émetteur"
enum BsdasriEmitterType {
  "Producteur"
  PRODUCER

  "Installation de regroupement"
  COLLECTOR
}

type BsdasriSignature {
  date: DateTime
  author: String
}

"Émetteur du Bsdasri, Personne responsable de l'émimination des déchets (PRED)"
type BsdasriEmitter {
  "Établissement émetteur"
  company: FormCompany
  "Site d'emport du déceht, si différent de celle de l'émetteur"
  workSite: WorkSite
  "Date de remise au tranporteur"
  handOverToTransporterAt: DateTime
  "Champ libre"
  customInfo: String
  "Type d'émetteur"
  type: BsdasriEmitterType
  "Agit pour le compte de l'éco organisme agréé"
  onBehalfOfEcoorganisme: Boolean!
}

"Destinataire du Bsdasri"
type BsdasriRecipient {
  """
  Installation destinataire
  """
  company: FormCompany

  "Champ libre"
  customInfo: String
}

"""
Collecteur transporteur
"""
type BsdasriTransporter {
  "Établissement de destination"
  company: FormCompany

  "N° de récipissé"
  receipt: String

  "Département"
  receiptDepartment: String

  "Limite de validité du récipissé"
  receiptValidityLimit: DateTime

  "Champ libre"
  customInfo: String
}

"Informations sur le conditionnement Bsdasri"
type BsdasriPackagingInfo {
  "Type de conditionnement"
  type: BsdasriPackagings!

  "Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"
  other: String

  "Nombre de colis associés à ce conditionnement"
  quantity: Int!

  volume: Int!
}
"Détail sur le déchet proprement dit du Bsdasri"
type BsdasriWasteDetails {
  quantity: Int
  quantityType: QuantityType
  volume: Int
  packagingInfos: [BsdasriPackagingInfo!]
  onuCode: String
}

"Informations relatives au déchet émis"
type BsdasriEmission {
  wasteCode: String
  wasteDetails: BsdasriWasteDetails
  handedOverAt: DateTime
  signature: BsdasriSignature
}

"Informations relatives à l'acceptation ou au refus du déchet (Bsdasri)"
type BsdasriWasteAcceptation {
  status: String
  refusalReason: String
  refusedQuantity: Int
}

"Informations relatives au transport du Bsdasri"
type BsdasriTransport {
  wasteDetails: BsdasriWasteDetails
  wasteAcceptation: BsdasriWasteAcceptation
  handedOverAt: DateTime
  takenOverAt: DateTime
  signature: BsdasriSignature
}

"Informations relatives à la réception du Bsdasri"
type BsdasriReception {
  wasteDetails: BsdasriWasteDetails
  wasteAcceptation: BsdasriWasteAcceptation
  receivedAt: DateTime
  signature: BsdasriSignature
}

"Informations relatives au traitement du Bsdasri"
type BsdasriOperation {
  processingOperation: String
  processedAt: DateTime
  signature: BsdasriSignature
}

"Bordereau Bsdasri"
type Bsdasri {
  id: ID!
  status: BsdasriStatus!
  createdAt: DateTime
  updatedAt: DateTime
  isDraft: Boolean!

  emitter: BsdasriEmitter
  emission: BsdasriEmission

  transporter: BsdasriTransporter
  transport: BsdasriTransport

  recipient: BsdasriRecipient
  reception: BsdasriReception
  operation: BsdasriOperation

  "Bordereaux regroupés"
  regroupedBsdasris: [ID!]

  metadata: BsdasriMetadata!
}

type BsdasriError {
  message: String!
  path: String!
  requiredFor: [BsdasriSignatureType!]!
}
type BsdasriMetadata {
  errors: [BsdasriError]!
}
