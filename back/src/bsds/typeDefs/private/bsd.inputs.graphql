input BsdWhere {
  createdAt: DateFilter
  updatedAt: DateFilter

  id: StringFilter
  readableId: StringFilter
  customId: StringFilter

  type: BsdTypeFilter
  bsdSubType: BsdSubTypeFilter
  status: StringFilter

  packagingNumbers: StringNullableListFilter
  sealNumbers: StringNullableListFilter
  identificationNumbers: StringNullableListFilter
  ficheInterventionNumbers: StringNullableListFilter

  emitter: BsdEmitterWhere
  transporter: BsdTransporterWhere
  waste: BsdWasteWhere
  worker: BsdWorkerWhere
  destination: BsdDestinationWhere
  broker: BsdBrokerWhere
  trader: BsdTraderWhere
  ecoOrganisme: BsdEcoOrganismeWhere

  isDraftFor: [String!]
  isForActionFor: [String!]
  isFollowFor: [String!]
  isArchivedFor: [String!]
  isToCollectFor: [String!]
  isCollectedFor: [String!]
  isReturnFor: [String!]
  # Révisions en cours
  isInRevisionFor: [String!]
  # Révisions passées
  isRevisedFor: [String!]

  sirets: StringNullableListFilter

  # Identifiants de tous les acteurs du BSD
  companyNames: TextFilter
  companyOrgIds: StringNullableListFilter

  _and: [BsdWhere!]
  _or: [BsdWhere!]
}

"Filtre pour les champs textuels"
input TextFilter {
  "Le texte de l'enregistrement a une correspondance en recherche textuelle avec la valeur du filtre"
  _match: String
}

input OrderBy {
  type: OrderType
  readableId: OrderType
  emitterCompanyName: OrderType
  destinationCompanyName: OrderType
  wasteCode: OrderType
}

input BsdCompanyWhere {
  name: TextFilter
  siret: StringFilter
  vatNumber: StringFilter
  address: TextFilter
}

input BsdEmissionWhere {
  date: DateFilter
}

input BsdPickupSiteWhere {
  name: TextFilter
  address: TextFilter
}

"Champs possible pour le filtre sur l'émetteur."
input BsdEmitterWhere {
  company: BsdCompanyWhere
  emission: BsdEmissionWhere
  pickupSite: BsdPickupSiteWhere
  customInfo: TextFilter
}

input BsdWasteWhere {
  code: StringFilter
  adr: TextFilter
  description: TextFilter
}

input BsdWorkWhere {
  date: DateFilter
}

input BsdWorkerWhere {
  company: BsdCompanyWhere
  work: BsdWorkWhere
}

input BsdTransportWhere {
  plates: StringNullableListFilter
  takenOverAt: DateFilter
}

input BsdTransporterWhere {
  company: BsdCompanyWhere
  customInfo: TextFilter
  transport: BsdTransportWhere
}

input BsdNextDestinationWhere {
  company: BsdCompanyWhere
}

input BsdOperationWhere {
  code: StringFilter
  date: DateFilter
  nextDestination: BsdNextDestinationWhere
}

input BsdReceptionWhere {
  date: DateFilter
}

input BsdAcceptationWhere {
  date: DateFilter
  status: WasteAcceptationStatusFilter
}

input BsdDestinationWhere {
  company: BsdCompanyWhere
  customInfo: TextFilter
  cap: TextFilter
  reception: BsdReceptionWhere
  acceptation: BsdAcceptationWhere
  operation: BsdOperationWhere
}

input BsdBrokerWhere {
  company: BsdCompanyWhere
}

input BsdTraderWhere {
  company: BsdCompanyWhere
}

input BsdEcoOrganismeWhere {
  name: TextFilter
  siret: StringFilter
}

input WasteAcceptationStatusFilter {
  _eq: WasteAcceptationStatus
  _in: [WasteAcceptationStatus!]
}

input BsdTypeFilter {
  _eq: BsdType
  _in: [BsdType!]
}

input BsdSubTypeFilter {
  _eq: BsdSubType
  _in: [BsdSubType!]
}

"""
Payload de recherche d'un établissment pour la fiche établissement

Recherche par:

- readableId
- siret (transporteur)
- plates
- siret et plate
"""
input ControlBsdWhere {
  # le siret d'un transporteur: 14 à 18 caractères
  siret: String
  # plaque d'immatriculation: 6 à 12 caractères
  plate: String
  # identifiant lisible du bsd: 20 à 25 caractères
  readableId: String
}
