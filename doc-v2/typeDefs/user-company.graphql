schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""Views of the Company ressource for the admin panel"""
type Query {
  """
  USAGE INTERNE > Mon Compte > Générer un token
  Renvoie un token permettant de s'authentifier à l'API Trackdéchets
  """
  apiKey: String!
  """Renvoie des BSD candidats à un regroupement dans une annexe 2"""
  appendixForms(
    """Siret d'un des établissements dont je suis membre"""
    siret: String!
    """(Optionnel) Code déchet pour affiner la recherche"""
    wasteCode: String
  ): [Form!]!
  """EXPERIMENTAL - Ne pas utiliser dans un contexte de production"""
  bsda(id: ID!): Bsda!
  """EXPERIMENTAL - Ne pas utiliser dans un contexte de production"""
  bsdas(
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Curseur après lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus récents
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    after: ID
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des bordereaux les plus anciens aux bordereaux les plus récents)
    Curseur avant lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    before: ID
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `cursorAfter` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Nombre de bordereaux retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int
    """
    (Optionnel) PAGINATION
    Nombre de bordereaux retournés avant le `cursorBefore`
    Défaut à 50, maximum à 500
    """
    last: Int
    where: BsdaWhere
  ): BsdaConnection!
  """EXPERIMENTAL - Ne pas utiliser dans un contexte de production"""
  bsdasri(
    """Identifiant du BSD"""
    id: ID!
  ): Bsdasri!
  """
  Renvoie un token pour télécharger un pdf de bordereau
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  bsdasriPdf(
    """ID d'un bordereau"""
    id: ID
  ): FileDownload!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Renvoie les Bsdasris.
  Par défaut, les dasris des différentes companies de l'utilisateur sont renvoyés.
  """
  bsdasris(
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des Bsdasri les plus récents aux Bsdasri les plus anciens)
    Curseur après lequel les Bsdasri doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les Bsdasri les plus récents.
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    after: ID
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des Bsdasri les plus anciens aux Bsdasris les plus récents)
    Curseur avant lequel les Bsdasri doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les Bsdasri les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    before: ID
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `after` de paginer "en avant"
    (des Bsdasri les plus récents aux Bsdasri les plus anciens)
    Nombre de Bsdasri retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int
    """
    (Optionnel) PAGINATION
    Nombre de Bsdasri retournés avant le `before`
    Défaut à 50, maximum à 500
    """
    last: Int
    """Filtres de recherche"""
    where: BsdasriWhere
  ): BsdasriConnection!
  bsds(after: String, clue: String, first: Int, orderBy: OrderBy, where: BsdWhere): BsdConnection!
  bsffs(after: ID, before: ID, first: Int, last: Int, where: BsffWhere): BsffConnection!
  """EXPERIMENTAL - Ne pas utiliser dans un contexte de production"""
  bsvhu(id: ID!): Bsvhu!
  """
  Renvoie un token pour télécharger un pdf de bordereau
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  bsvhuPdf(
    """ID d'un bordereau"""
    id: ID
  ): FileDownload!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Tous les arguments sont optionnels.
  Par défaut, retourne les 50 premiers bordereaux associés à entreprises dont vous êtes membres
  """
  bsvhus(
    """
    PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Curseur après lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus récents
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    after: ID
    """
    PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des bordereaux les plus anciens aux bordereaux les plus récents)
    Curseur avant lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    before: ID
    """
    PAGINATION
    Permet en conjonction avec `cursorAfter` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Nombre de bordereaux retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int
    """
    PAGINATION
    Nombre de bordereaux retournés avant le `cursorBefore`
    Défaut à 50, maximum à 500
    """
    last: Int
    """Filtres"""
    where: BsvhuWhere
  ): BsvhuConnection!
  """List companies for the company verfication table of the admin panel"""
  companiesForVerification(first: Int, last: Int, skip: Int, where: CompanyForVerificationWhere): CompanyForVerificationConnection!
  """
  Renvoie des informations publiques sur un établissement
  extrait de la base SIRENE et de la base des installations
  classées pour la protection de l'environnement (ICPE)
  """
  companyInfos(
    """SIRET de l'établissement"""
    siret: String!
  ): CompanyPublic!
  """Renvoie la liste des éco-organismes"""
  ecoOrganismes: [EcoOrganisme!]!
  """
  Renvoie les établissements favoris de l'utilisateur. C'est à dire les
  établissements qui font souvent partis des BSD édités
  """
  favorites(
    """siret de l'entreprise pour laquelle retourner les favoris"""
    siret: String!
    """type de favoris"""
    type: FavoriteType!
  ): [CompanyFavorite!]!
  """Renvoie un BSD sélectionné par son ID (opaque ou lisible, l'un des deux doit être fourni)"""
  form(
    """Identifiant opaque du BSD"""
    id: ID
    """Identifiant lisible du BSD"""
    readableId: String
  ): Form!
  """
  Renvoie un token pour télécharger un pdf de BSD
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  formPdf(
    """ID d'un BSD"""
    id: ID
  ): FileDownload!
  """
  Renvoie les BSDs de l'établissement sélectionné.
  Si aucun SIRET n'est précisé et que l'utilisateur est membre d'une seule entreprise
  alors les BSD de cette entreprise sont retournés.
  Si l'utilisateur est membre de 2 entreprises ou plus, vous devez obligatoirement
  préciser un SIRET
  Si l'utilisateur n'est membre d'aucune entreprise, un tableau vide sera renvoyé
  
  Vous pouvez filtrer:
  - par rôle que joue votre entreprise sur le BSD via `role`
  - par date de dernière modification via `updatedAfter`
  - par date d'envoi via `sentAfter`
  - par statut du BSD via `status`
  - les BSD qui attendent une action (ou non) de votre part via `hasNextStep`
  - par code déchet via `wasteCode`
  - par SIRET d'une entreprise présente n'importe où sur le bordereau via `siretPresentOnForm`
  
  Par défaut:
  - tous les BSD accessibles sont retournés
  - les BSD sont classés par date de création, de la plus récente à la plus vieille
  - les résultats sont paginés par 50. Il est possible de modifier cette valeur via `first` ou `last` en fonction du curseur utilisé
  - pour afficher la suite des résultats, utiliser `cursorAfter` ou `cursorBefore`
  """
  forms(
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Curseur après lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus récents
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    cursorAfter: ID
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des bordereaux les plus anciens aux bordereaux les plus récents)
    Curseur avant lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    cursorBefore: ID
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `cursorAfter` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Nombre de bordereaux retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int
    """
    (Optionnel) Permet de filtrer sur les bordereaux en attente d'une action de votre part
    Si `true`, seul les bordereaux attendant une action sont renvoyés
    Si `false`, seul les bordereaux n'attendant aucune action son renvoyés
    Si vide, tous les bordereaux sont renvoyés
    Défaut à vide.
    """
    hasNextStep: Boolean
    """
    (Optionnel) PAGINATION
    Nombre de bordereaux retournés avant le `cursorBefore`
    Défaut à 50, maximum à 500
    """
    last: Int
    """
    (Optionnel) Filtre sur le role de demandeur dams le bordereau
    Par exemple:
     - `roles: [TRANSPORTER]` renverra les bordereaux pour lesquels je suis transporteur
     - `roles: [EMITTER, RECIPIENT]` renverra les bordereaux dont je suis l'émetteur ou le destinataire final
    Voir `FormRole` pour la liste des roles sur lesquels il est possible de filtrer.
    Si aucune filtre n'est passé, les bordereaux seront retournés quel que soit votre role dessus.
    Défaut à vide.
    """
    roles: [FormRole!]
    """
    (Optionnel) Retourne les BSD envoyés après la date
    Filtre sur la date d'envoi (date de la case 9 du bordereau)
    Au format (YYYY-MM-DD)
    Par défaut vide, aucun filtre n'est appliqué
    """
    sentAfter: String
    """SIRET d'un établissement dont je suis membre"""
    siret: String
    """
    (Optionnel) Siret d'une autre entreprise présente sur le bordereau
    Vous n'avez pas besoin d'être membre de cette entreprise.
    Seuls les bordereaux ou cette entreprise apparait (dans n'importe quel cadre) seront retournés.
    Défaut à vide.
    """
    siretPresentOnForm: String
    """
    DEPRECATED - (Optionnel) PAGINATION
    Nombre d'éléments à ne pas récupérer en début de liste dans le mode de pagination par "offset"
    Utiliser en conjonction avec `first` pour paginer "en avant" (des plus récents aux plus anciens)
    Utiliser en conjonction avec `last` pour paginer "en arrière" (des plus anciens aux plus récents)
    Défaut à 0
    """
    skip: Int
    """
    (Optionnel) Filtre sur les statuts des bordereaux
    Si aucun filtre n'est passé, les bordereaux seront retournés quel que soit leur statut
    Défaut à vide.
    """
    status: [FormStatus!]
    """
    (Optionnel) Retourne les BSD modifiés après la date
    Filtre sur la date de dernière modification
    Au format (YYYY-MM-DD)
    Par défaut vide, aucun filtre n'est appliqué
    """
    updatedAfter: String
    """
    (Optionnel) Code déchet pour affiner la recherche
    Ex: 01 03 04* (Veillez à bien respecter les espaces).
    Défaut à vide.
    """
    wasteCode: String
  ): [Form!]!
  """
  Renvoie les changements de statut des bordereaux de l'entreprise sélectionnée.
  La liste est paginée par pages de 100 items, ordonnée par date décroissante (champ `loggedAt`)
  Seuls les changements de statut disposant d'un champ `loggedAt` non nul sont retournés
  """
  formsLifeCycle(
    """
    (Optionnel) PAGINATION
    Permet de paginer les changements de statut "en avant"
    (des changements de statut les plus récents aux changements de statut les plus anciens)
    Curseur après lequel les changements de statut doivent être retournés
    Attend un identifiant (propriété `id`) d'un changement de statut
    Défaut à vide, pour retourner les changements de statut les plus récents
    Le changement de statut précisé dans le curseur ne fait pas partie du résultat
    """
    cursorAfter: String
    """
    (Optionnel) PAGINATION
    Permet de paginer les changements de statut "en arrière"
    (des changements de statut les plus anciens aux changements de statut les plus récents)
    Curseur avant lequel les changements de statut doivent être retournés
    Attend un identifiant (propriété `id`) d'un changement de statut
    Défaut à vide, pour retourner les changements de statut les plus anciens
    Le changement de statut précisé dans le curseur ne fait pas partie du résultat
    """
    cursorBefore: String
    """(Optionnel) ID d'un BSD en particulier"""
    formId: ID
    """(Optionnel) Date formatée avant laquelle les changements de statut doivent être retournés (YYYY-MM-DD), optionnel"""
    loggedAfter: String
    """(Optionnel) Date formatée après laquelle les changements de statut doivent être retournés (YYYY-MM-DD)"""
    loggedBefore: String
    """(Optionnel) SIRET d'un établissement dont je suis membre"""
    siret: String
  ): formsLifeCycleData!
  """
  Renvoie un token pour télécharger un csv du regsitre
  Ce token doit être transmis à la route /download pour obtenir le fichier.
  Il est valable 10 secondes
  """
  formsRegister(
    """
    (Optionnel) Filtre les données par une date de fin
    Défaut: aucune valeur
    """
    endDate: DateTime
    """
    (Optionnel) Format de l'export
    Défaut: csv
    """
    exportFormat: FormsRegisterExportFormat
    """
    (Optionnel) Modèle de registre (exhaustif, entrants, sortants, transport, négociants)
    Défaut: ALL
    """
    exportType: FormsRegisterExportType
    """Liste de SIRET pour lesquelles exporter le registre"""
    sirets: [String!]!
    """
    (Optionnel) Filtre les données par une date de début
    Défaut: aucune valeur
    """
    startDate: DateTime
    """
    (Optionnel) Filtre les données par code déchet
    Défaut: Tous les codes déchets
    """
    wasteCode: String
  ): FileDownload!
  """
  USAGE INTERNE
  Recherche une invitation à rejoindre une entreprise
  par son hash
  """
  invitation(hash: String!): Invitation
  """Renvoie les informations sur l'utilisateur authentifié"""
  me: User!
  """
  Récupère une demande de rattachement effectuée par l'utilisateur courant
  à partir de l'identifiant de cette demande ou du SIRET de l'établissement
  auquel l'utilisateur a demandé à être rattaché. L'un ou l'autre des
  paramètres (id ou siret) doit être être passé mais pas les deux. Cette query
  permet notamment de suivre l'état d'avancement de la demande de rattachement
  (en attente, accepté, refusé)
  """
  membershipRequest(id: ID, siret: String): MembershipRequest
  """
  Effectue une recherche floue sur la base SIRENE et enrichit
  les résultats avec des informations provenant de Trackdéchets
  """
  searchCompanies(
    """
    Champ utilisé pour faire une recherche floue
    sur la nom de l'établissement, ex: 'Boulangerie Dupont'
    """
    clue: String!
    """(Optionnel) Filtre les résultats par numéro de département"""
    department: String
  ): [CompanySearchResult!]!
  """Renvoie des statistiques sur le volume de déchets entrant et sortant"""
  stats: [CompanyStat!]!
}

"""
Bordereau de suivi de déchets (BSD)
Version dématérialisée du [CERFA n°12571*01](https://www.service-public.fr/professionnels-entreprises/vosdroits/R14334)
"""
type Form {
  """
  Quantité actuellement connue en tonnes.
  Elle est calculée en fonction des autres champs pour renvoyer la dernière quantité connue.
  Elle renvoi ainsi soit la quantité envoyée estimée, soit la quantitée recue sur le site d'entreposage, soit la quantitée réelle recue.
  """
  actualQuantity: Float
  """Annexe 2"""
  appendix2Forms: [Form!]
  """Courtier"""
  broker: Broker
  """Date de création du BSD"""
  createdAt: DateTime
  currentTransporterSiret: String
  """
  Identifiant personnalisé permettant de faire le lien avec un
  objet un système d'information tierce
  """
  customId: String
  ecoOrganisme: FormEcoOrganisme
  """Établissement émetteur/producteur du déchet (case 1)"""
  emitter: Emitter
  """Identifiant unique du bordereau."""
  id: ID!
  """
  Permet de savoir si les données du BSD ont été importées depuis un
  bordereau signé papier via la mutation `importPaperForm`
  """
  isImportedFromPaper: Boolean!
  """Destination ultérieure prévue (case 12)"""
  nextDestination: NextDestination
  nextTransporterSiret: String
  """Si oui ou non il y a eu perte de traçabalité"""
  noTraceability: Boolean
  """Date à laquelle le déchet a été traité"""
  processedAt: DateTime
  """Personne en charge du traitement"""
  processedBy: String
  """Description de l'opération d’élimination / valorisation (case 11)"""
  processingOperationDescription: String
  """Traitement réalisé (code D/R)"""
  processingOperationDone: String
  """Quantité réelle présentée (case 10)"""
  quantityReceived: Float
  """
  Identifiant lisible utilisé comme numéro sur le CERFA (case "Bordereau n°****").
  Il est possible de l'utiliser pour récupérer l'identifiant unique du bordereau via la query form,
  utilisé pour le reste des opérations.
  Cet identifiant possède le format BSD-{yyyyMMdd}-{XXXXXXXX} où yyyyMMdd est la date du jour
  et XXXXXXXXX une chaine de 9 caractères alphanumériques. Ex: BSD-20210101-HY87F54D1
  """
  readableId: String!
  """Date à laquelle le déchet a été reçu (case 10)"""
  receivedAt: DateTime
  """Nom de la personne en charge de la réception du déchet (case 10)"""
  receivedBy: String
  """Installation de destination ou d’entreposage ou de reconditionnement prévue (case 2)"""
  recipient: Recipient
  """Date de l'envoi du déchet par l'émetteur (case 9)"""
  sentAt: DateTime
  """Nom de la personne responsable de l'envoi du déchet (case 9)"""
  sentBy: String
  """Date à laquelle le déchet a été accepté ou refusé (case 10)"""
  signedAt: DateTime
  """Si oui ou non le BSD a été signé par un transporteur"""
  signedByTransporter: Boolean
  """Résumé des valeurs clés du bordereau à l'instant T"""
  stateSummary: StateSummary
  """Statut du BSD (brouillon, envoyé, reçu, traité, etc)"""
  status: FormStatus!
  """BSD suite - détail des champs de la partie entreposage provisoire ou reconditionnement"""
  temporaryStorageDetail: TemporaryStorageDetail
  """Négociant (case 7)"""
  trader: Trader
  """Transporteur du déchet (case 8)"""
  transporter: Transporter
  transportSegments: [TransportSegment!]
  """Date de la dernière modification du BSD"""
  updatedAt: DateTime
  """Statut d'acceptation du déchet (case 10)"""
  wasteAcceptationStatus: String
  """Détails du déchet (case 3)"""
  wasteDetails: WasteDetails
  """Raison du refus (case 10)"""
  wasteRefusalReason: String
}

"""Courtier"""
type Broker {
  """Établissement courtier"""
  company: FormCompany
  """Département"""
  department: String
  """N° de récipissé"""
  receipt: String
  """Limite de validité"""
  validityLimit: DateTime
}

"""Information sur un établissement dans un BSD"""
type FormCompany {
  """Adresse de l'établissement"""
  address: String
  """Nom du contact dans l'établissement"""
  contact: String
  """
  Code ISO 3166-1 alpha-2 du pays d'origine de l'entreprise :
  https://fr.wikipedia.org/wiki/ISO_3166-1_alpha-2
  
  Seul la destination ultérieure case 12 (`form.nextDestination.company`) peut être à l'étranger.
  """
  country: String
  """Email du contact dans l'établissement"""
  mail: String
  """Nom de l'établissement"""
  name: String
  """Numéro de téléphone de contact dans l'établissement"""
  phone: String
  """SIRET de l'établissement"""
  siret: String
  """Numéro de TVA intracommunautaire"""
  vatNumber: String
}

"""
Le scalaire `DateTime` accepte des chaines de caractères
formattées selon le standard ISO 8601. Exemples:
- "yyyy-MM-dd" (eg. 2020-11-23)
- "yyyy-MM-ddTHH:mm:ss" (eg. 2020-11-23T13:34:55)
- "yyyy-MM-ddTHH:mm:ssX" (eg. 2020-11-23T13:34:55Z)
- "yyyy-MM-dd'T'HH:mm:ss.SSS" (eg. 2020-11-23T13:34:55.987)
- "yyyy-MM-dd'T'HH:mm:ss.SSSX" (eg. 2020-11-23T13:34:55.987Z)
"""
scalar DateTime

"""Information sur l'éco-organisme responsable du BSD"""
type FormEcoOrganisme {
  name: String!
  siret: String!
}

"""Émetteur du BSD (case 1)"""
type Emitter {
  """Établissement émetteur"""
  company: FormCompany
  """DEPRECATED - Ancienne adresse chantier"""
  pickupSite: String @deprecated(reason: "Migration vers `workSite` obligatoire")
  """Type d'émetteur"""
  type: EmitterType
  """Adresse du chantier"""
  workSite: WorkSite
}

"""Types d'émetteur de déchet (choix multiple de la case 1)"""
enum EmitterType {
  """Collecteur de petites quantités de déchets relevant de la même rubrique"""
  APPENDIX1
  """Personne ayant transformé ou réalisé un traitement dont la provenance des déchets reste identifiable"""
  APPENDIX2
  """Autre détenteur"""
  OTHER
  """Producetur de déchet"""
  PRODUCER
}

"""Informations sur une adresse chantier"""
type WorkSite {
  address: String
  city: String
  infos: String
  name: String
  postalCode: String
}

"""Destination ultérieure prévue (case 12)"""
type NextDestination {
  """Établissement ultérieure"""
  company: FormCompany
  """Traitement prévue (code D/R)"""
  processingOperation: String
}

"""
Installation de destination ou d'entreprosage
ou de reconditionnement prévue (case 2)
"""
type Recipient {
  """N° de CAP (le cas échéant)"""
  cap: String
  """Établissement de destination"""
  company: FormCompany
  """Indique si c'est un établissement d'entreposage temporaire ou de reocnditionnement"""
  isTempStorage: Boolean
  """Opération d'élimination / valorisation prévue (code D/R)"""
  processingOperation: String
}

"""
En fonction du statut du bordereau, différentes informations sont à lire pour connaitre vraiment l'étast du bordereau:
- la quantité peut changer entre émission, réception, entreposage provisoire...
- le bordereau peut naviguer entre plusieurs entreprises.
- quand le bordereau a-t-il été modifié pour la dernière fois ? (création, signature, traitement... ?)
- si c'est un bordereau avec conditionnement et qu'on attend un transporteur, quel est-il ?

Cet objet `StateSummary` vise à simplifier ces questions. Il renverra toujours la valeur pour un instant T donné.
"""
type StateSummary {
  """Prochaine entreprise à émettre le déchet (entreprise en case 1 ou 13)"""
  emitter: FormCompany
  """Date de la dernière action sur le bordereau"""
  lastActionOn: DateTime
  """Code ONU le plus à jour"""
  onuCode: String
  """Packaging le plus à jour"""
  packagingInfos: [PackagingInfo!]!
  """DEPRECATED Packaging le plus à jour"""
  packagings: [Packagings!]! @deprecated(reason: "Utiliser packagingInfos")
  """Quantité la plus à jour"""
  quantity: Float
  """Prochaine entreprise à recevoir le déchet (entreprise en case 2 ou 14)"""
  recipient: FormCompany
  """Prochaine entreprise à transporter le déchet (entreprise en case 8 ou 18)"""
  transporter: FormCompany
  """Information libre, destinée aux transporteurs"""
  transporterCustomInfo: String
  """Numéro de plaque d'immatriculation"""
  transporterNumberPlate: String
}

"""Informations sur le conditionnement"""
type PackagingInfo {
  """Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"""
  other: String
  """Nombre de colis associés à ce conditionnement"""
  quantity: Int!
  """Type de conditionnement"""
  type: Packagings!
}

"""Type de packaging du déchet"""
enum Packagings {
  """Autre"""
  AUTRE
  """Benne"""
  BENNE
  """Citerne"""
  CITERNE
  """Fut"""
  FUT
  """GRV"""
  GRV
}

"""Différents statuts d'un BSD au cours de son cycle de vie"""
enum FormStatus {
  """BSD accepté par l'établissement de destination"""
  ACCEPTED
  """BSD en attente de regroupement"""
  AWAITING_GROUP
  """
  BSD à l'état de brouillon
  Des champs obligatoires peuvent manquer
  """
  DRAFT
  """Regroupement effectué"""
  GROUPED
  """Perte de traçabalité"""
  NO_TRACEABILITY
  """BSD dont les déchets ont été traités"""
  PROCESSED
  """BSD reçu par l'établissement de destination"""
  RECEIVED
  """Déchet refusé"""
  REFUSED
  """Déchet avec les cadres 14-19 complétées (si besoin), prêt à partir du site d'entreposage ou reconditionnement"""
  RESEALED
  """Déchet envoyé du site d'entreposage ou reconditionnement vers sa destination de traitement"""
  RESENT
  """
  BSD finalisé
  Les champs sont validés pour détecter des valeurs manquantes ou erronnées
  """
  SEALED
  """BSD envoyé vers l'établissement de destination"""
  SENT
  """Déchet arrivé sur le site d'entreposage ou reconditionnement"""
  TEMP_STORED
  """Déchet accepté par le site d'entreposage ou reconditionnement"""
  TEMP_STORER_ACCEPTED
}

"""Données du BSD suite sur la partie entreposage provisoire ou reconditionnement, rattachées à un BSD existant"""
type TemporaryStorageDetail {
  """
  Installation de destination prévue (case 14) à remplir par le producteur ou
  le site d'entreposage provisoire
  """
  destination: Destination
  """Date de signature du BSD suite (case 19)"""
  signedAt: DateTime
  """Nom du signataire du BSD suite  (case 19)"""
  signedBy: String
  """Établissement qui stocke temporairement le déchet (case 13)"""
  temporaryStorer: TemporaryStorer
  """Transporteur du déchet (case 18)"""
  transporter: Transporter
  """Détails du déchet (cases 15, 16 et 17)"""
  wasteDetails: WasteDetails
}

type Destination {
  """N° de CAP (le cas échéant)"""
  cap: String
  """Établissement de destination"""
  company: FormCompany
  """Indique si l'information a été saisie par l'émetteur du bordereau ou l'installation d'entreposage"""
  isFilledByEmitter: Boolean
  """Opération d'élimination / valorisation prévue (code D/R)"""
  processingOperation: String
}

type TemporaryStorer {
  quantityReceived: Float
  quantityType: QuantityType
  receivedAt: DateTime
  receivedBy: String
  wasteAcceptationStatus: String
  wasteRefusalReason: String
}

"""Type de quantité lors de l'émission"""
enum QuantityType {
  """Quantité estimée"""
  ESTIMATED
  """Quntité réelle"""
  REAL
}

"""Collecteur - transporteur (case 8)"""
type Transporter {
  """Établissement collecteur - transporteur"""
  company: FormCompany
  """Information libre, destinée aux transporteurs"""
  customInfo: String
  """Département"""
  department: String
  """Exemption de récipissé"""
  isExemptedOfReceipt: Boolean
  """Numéro de plaque d'immatriculation"""
  numberPlate: String
  """N° de récipissé"""
  receipt: String
  """Limite de validité du récipissé"""
  validityLimit: DateTime
}

"""Détails du déchet (case 3, 4, 5, 6)"""
type WasteDetails {
  """Rubrique déchet au format |_|_| |_|_| |_|_| (*)"""
  code: String
  """Consistance"""
  consistence: Consistence
  """Dénomination usuelle"""
  name: String
  """Nombre de colis"""
  numberOfPackages: Int @deprecated(reason: "Utiliser `packagingInfos`")
  """Code ONU"""
  onuCode: String
  """Autre packaging (préciser)"""
  otherPackaging: String @deprecated(reason: "Utiliser `packagingInfos`")
  """Conditionnements"""
  packagingInfos: [PackagingInfo!]
  """Conditionnement"""
  packagings: [Packagings!] @deprecated(reason: "Utiliser `packagingInfos`")
  """Contient des Polluants Organiques Persistants (POP) oui / non"""
  pop: Boolean
  """Quantité en tonnes"""
  quantity: Float
  """Réelle ou estimée"""
  quantityType: QuantityType
}

"""Consistance du déchet"""
enum Consistence {
  """Pâteux"""
  DOUGHY
  """Gazeux"""
  GASEOUS
  """Liquide"""
  LIQUID
  """Solide"""
  SOLID
}

"""Négociant (case 7)"""
type Trader {
  """Établissement négociant"""
  company: FormCompany
  """Département"""
  department: String
  """N° de récipissé"""
  receipt: String
  """Limite de validité"""
  validityLimit: DateTime
}

type TransportSegment {
  id: ID!
  """Mode de transport"""
  mode: TransportMode
  """Siret du transporteur précédent"""
  previousTransporterCompanySiret: String
  """Prêt à être pris en charge"""
  readyToTakeOver: Boolean
  """Numéro du segment"""
  segmentNumber: Int
  """Date de prise en charge"""
  takenOverAt: DateTime
  """Reponsable de la prise en charge"""
  takenOverBy: String
  """Transporteur du segment"""
  transporter: Transporter
}

enum TransportMode {
  AIR
  RAIL
  RIVER
  ROAD
  SEA
}

type Bsda {
  """Précedents BSDA associés, constituant l'historique de traçabilité"""
  associations: [BsdaAssociation]
  """Date de création"""
  createdAt: DateTime!
  """Installation de destination"""
  destination: BsdaDestination
  """Maitre d'ouvrage ou détenteur du déchet"""
  emitter: BsdaEmitter
  """Bordereau n°"""
  id: String!
  """Indique si le bordereau est à l'état de brouillon"""
  isDraft: Boolean!
  """Conditionnement"""
  packagings: [BsdaPackaging!]
  """Quantité"""
  quantity: BsdaQuantity
  """Statur du bordereau"""
  status: BsdaStatus!
  """Entreprise de transport"""
  transporter: BsdaTransporter
  """
  Type de bordereau
  Le type de bordereau impacte le workflow et les champs obligatoires
  """
  type: BsdaType
  """Date de dernière modification"""
  updatedAt: DateTime!
  """Dénomination du déchet"""
  waste: BsdaWaste
  """Entreprise de travaux"""
  worker: BsdaWorker
}

type BsdaAssociation {
  id: ID!
  status: BsdaStatus!
}

enum BsdaStatus {
  AWAITING_CHILD
  INITIAL
  PROCESSED
  REFUSED
  SENT
  SIGNED_BY_PRODUCER
  SIGNED_BY_WORKER
}

type BsdaDestination {
  """N° de CAP (le cas échéant)"""
  cap: String
  """Établissement de destination"""
  company: FormCompany
  """Réalisation de l'opération (case 11)"""
  operation: BsdaOperation
  """Opération d'élimination / valorisation prévue (code D/R)"""
  plannedOperationCode: String
  """Expédition reçue à l'installation de destination"""
  reception: BsdaReception
}

type BsdaOperation {
  """Code D/R"""
  code: String
  """Date de réalisation de l'opération"""
  date: DateTime
  signature: Signature
}

type Signature {
  author: String
  date: DateTime
}

type BsdaReception {
  """Lot accepté, accepté partiellement ou refusé"""
  acceptationStatus: BsdaAcceptationStatus
  """Date de présentation sur site"""
  date: DateTime
  """Quantité présentée"""
  quantity: BsdaQuantity
  """Motif de refus"""
  refusalReason: String
  """Signature case 10"""
  signature: Signature
}

enum BsdaAcceptationStatus {
  ACCEPTED
  PARTIALLY_REFUSED
  REFUSED
}

type BsdaQuantity {
  """Type de quantité (réelle ou estimé)"""
  type: BsdaQuantityType
  """Quantité en tonne"""
  value: Float
}

enum BsdaQuantityType {
  ESTIMATED
  REAL
}

type BsdaEmitter {
  """Établissement MOA/détenteur. Partiellement rempli si l'émetteur est en fait un particulier"""
  company: FormCompany
  """Déclaration générale"""
  emission: BsdaEmission
  """Indique si le détenteur est un particulier ou une entreprise"""
  isPrivateIndividual: Boolean
  """Informations chantier (si différente de l'adresse de l'entreprise)"""
  worksite: BsdaWorksite
}

type BsdaEmission {
  signature: Signature
}

type BsdaWorksite {
  address: String
  city: String
  """Autres informations, notamment le code chantier"""
  infos: String
  name: String
  postalCode: String
}

type BsdaPackaging {
  """Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"""
  other: String
  """Nombre de colis associés à ce conditionnement"""
  quantity: Int!
  """Type de conditionnement"""
  type: BsdaPackagingType!
}

enum BsdaPackagingType {
  BIG_BAG
  BODY_BENNE
  DEPOT_BAG
  OTHER
  PALETTE_FILME
  SAC_RENFORCE
}

type BsdaTransporter {
  """Coordonnées de l'entreprise de transport"""
  company: FormCompany
  """Récépissé transporteur"""
  recepisse: BsdaRecepisse
  """Déclaration générale"""
  transport: BsdaTransport
}

type BsdaRecepisse {
  department: String
  number: String
  validityLimit: DateTime
}

type BsdaTransport {
  signature: Signature
}

"""
4 types de bordereaux possibles:
  - Collecte dans un établissement 2710-1 (déchetterie)
  - Autres collectes
  - Regroupement
  - Ré-expédition
"""
enum BsdaType {
  COLLECTION_2710
  GATHERING
  OTHER_COLLECTIONS
  RESHIPMENT
}

type BsdaWaste {
  """Mention ADR"""
  adr: String
  """Rubrique Déchet"""
  code: String
  """Consistence"""
  consistence: BsdaConsistence
  """Code famille"""
  familyCode: String
  """Nom du matériau"""
  materialName: String
  """Dénomination usuelle"""
  name: String
  """Numéros de scellés"""
  sealNumbers: [String!]
}

enum BsdaConsistence {
  OTHER
  PULVERULENT
  SOLIDE
}

type BsdaWorker {
  """Entreprise de travaux"""
  company: FormCompany
  """Déclaration générale"""
  work: BsdaWork
}

type BsdaWork {
  """
  Indique si l'entreprise de travaux a une signature papier du MOA/détenteur du déchet
  Remettre une signature papier permet au détenteur de ne pas à avoir à signer sur la plateforme
  """
  hasEmitterPaperSignature: Boolean
  signature: Signature
}

input BsdaWhere {
  _and: [BsdaWhere!]
  _not: [BsdaWhere!]
  _or: [BsdaWhere!]
  createdAt: DateFilter
  destination: BsdaDestinationWhere
  emitter: BsdaEmitterWhere
  isDraft: Boolean
  status: BsdaStatus
  transporter: BsdaTransporterWhere
  updatedAt: DateFilter
  worker: BsdaWorkerWhere
}

input DateFilter {
  _eq: DateTime
  _gt: DateTime
  _gte: DateTime
  _lt: DateTime
  _lte: DateTime
}

input BsdaDestinationWhere {
  company: BsdaCompanyWhere
  operation: BsdaOperationWhere
}

input BsdaCompanyWhere {
  siret: String!
}

input BsdaOperationWhere {
  signature: BsdaSignatureWhere
}

input BsdaSignatureWhere {
  date: DateFilter!
}

input BsdaEmitterWhere {
  company: BsdaCompanyWhere
  emission: BsdaEmissionWhere
}

input BsdaEmissionWhere {
  signature: BsdaSignatureWhere
}

input BsdaTransporterWhere {
  company: BsdaCompanyWhere
  transport: BsdaTransportWhere
}

input BsdaTransportWhere {
  signature: BsdaSignatureWhere
}

input BsdaWorkerWhere {
  company: BsdaCompanyWhere
  work: BsdaWorkWhere
}

input BsdaWorkWhere {
  signature: BsdaSignatureWhere
}

type BsdaConnection {
  edges: [BsdaEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BsdaEdge {
  cursor: String!
  node: Bsda!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Bordereau Bsdasri"""
type Bsdasri {
  createdAt: DateTime
  emission: BsdasriEmission
  emitter: BsdasriEmitter
  id: ID!
  isDraft: Boolean!
  metadata: BsdasriMetadata!
  operation: BsdasriOperation
  reception: BsdasriReception
  recipient: BsdasriRecipient
  """Bordereaux regroupés"""
  regroupedBsdasris: [ID!]
  status: BsdasriStatus!
  transport: BsdasriTransport
  transporter: BsdasriTransporter
  updatedAt: DateTime
}

"""Informations relatives au déchet émis"""
type BsdasriEmission {
  handedOverAt: DateTime
  signature: BsdasriSignature
  wasteCode: String
  wasteDetails: BsdasriWasteDetails
}

type BsdasriSignature {
  author: String
  date: DateTime
}

"""Détail sur le déchet proprement dit du Bsdasri"""
type BsdasriWasteDetails {
  onuCode: String
  packagingInfos: [BsdasriPackagingInfo!]
  quantity: Int
  quantityType: QuantityType
  volume: Int
}

"""Informations sur le conditionnement Bsdasri"""
type BsdasriPackagingInfo {
  """Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"""
  other: String
  """Nombre de colis associés à ce conditionnement"""
  quantity: Int!
  """Type de conditionnement"""
  type: BsdasriPackagings!
  volume: Int!
}

"""Type de packaging du déchet"""
enum BsdasriPackagings {
  """Autre"""
  AUTRE
  """Caisse en carton avec sac en plastique"""
  BOITE_CARTON
  """Boîtes et Mini-collecteurs pour déchets perforants"""
  BOITE_PERFORANTS
  """Fûts ou jerrican à usage unique"""
  FUT
  """Grand emballage"""
  GRAND_EMBALLAGE
  """Grand récipient pour vrac"""
  GRV
}

"""Émetteur du Bsdasri, Personne responsable de l'émimination des déchets (PRED)"""
type BsdasriEmitter {
  """Établissement émetteur"""
  company: FormCompany
  """Champ libre"""
  customInfo: String
  """Date de remise au tranporteur"""
  handOverToTransporterAt: DateTime
  """Agit pour le compte de l'éco organisme agréé"""
  onBehalfOfEcoorganisme: Boolean!
  """Type d'émetteur"""
  type: BsdasriEmitterType
  """Site d'emport du déceht, si différent de celle de l'émetteur"""
  workSite: WorkSite
}

"""Type d'émetteur"""
enum BsdasriEmitterType {
  """Installation de regroupement"""
  COLLECTOR
  """Producteur"""
  PRODUCER
}

type BsdasriMetadata {
  errors: [BsdasriError]!
}

type BsdasriError {
  message: String!
  path: String!
  requiredFor: [BsdasriSignatureType!]!
}

enum BsdasriSignatureType {
  """Signature du cadre émetteur (PRED)"""
  EMISSION
  """Signature du traitement du déchet"""
  OPERATION
  """Signature de la réception du déchet"""
  RECEPTION
  """Signature du cadre collecteur transporteur"""
  TRANSPORT
}

"""Informations relatives au traitement du Bsdasri"""
type BsdasriOperation {
  processedAt: DateTime
  processingOperation: String
  signature: BsdasriSignature
}

"""Informations relatives à la réception du Bsdasri"""
type BsdasriReception {
  receivedAt: DateTime
  signature: BsdasriSignature
  wasteAcceptation: BsdasriWasteAcceptation
  wasteDetails: BsdasriWasteDetails
}

"""Informations relatives à l'acceptation ou au refus du déchet (Bsdasri)"""
type BsdasriWasteAcceptation {
  refusalReason: String
  refusedQuantity: Int
  status: String
}

"""Destinataire du Bsdasri"""
type BsdasriRecipient {
  """Installation destinataire"""
  company: FormCompany
  """Champ libre"""
  customInfo: String
}

enum BsdasriStatus {
  """Bsdasri dans son état initial"""
  INITIAL
  """Bsdasri dont les déchets ont été traités"""
  PROCESSED
  """Bsdasri reçu par l'établissement de destination"""
  RECEIVED
  """Déchet refusé"""
  REFUSED
  """Bsdasri envoyé vers l'établissement de destination"""
  SENT
  """Optionnel, Bsdasri signé par la PRED (émetteur)"""
  SIGNED_BY_PRODUCER
}

"""Informations relatives au transport du Bsdasri"""
type BsdasriTransport {
  handedOverAt: DateTime
  signature: BsdasriSignature
  takenOverAt: DateTime
  wasteAcceptation: BsdasriWasteAcceptation
  wasteDetails: BsdasriWasteDetails
}

"""Collecteur transporteur"""
type BsdasriTransporter {
  """Établissement de destination"""
  company: FormCompany
  """Champ libre"""
  customInfo: String
  """N° de récipissé"""
  receipt: String
  """Département"""
  receiptDepartment: String
  """Limite de validité du récipissé"""
  receiptValidityLimit: DateTime
}

"""
URL de téléchargement accompagné d'un token
permettant de valider le téléchargement.
"""
type FileDownload {
  """Lien de téléchargement"""
  downloadLink: String
  """Token ayant une durée de validité de 10s"""
  token: String
}

input BsdasriWhere {
  _and: [BsdasriWhere!]
  _not: [BsdasriWhere!]
  _or: [BsdasriWhere!]
  createdAt: DateFilter
  emitter: BsdasriEmitterWhere
  """
  (Optionnel) Filtre sur l'état de regroupement des bordereaux
  Si aucun filtre n'est passé, les bordereaux seront retournés sans filtrage supplémentaire
  Si groupable: true, les bordereaux retournés ne sont pas déjà regroupés et ne regroupent pas d'autres bordereaux
  Si groupable: false, les bordereaux retournés ne sont déjà regroupés ou ne regroupent d'autres bordereaux
  """
  groupable: Boolean
  """(Optionnel) Permet de récupérer uniquement les bordereaux en brouillon"""
  isDraft: Boolean
  processingOperation: [processingOperationTypes!]
  recipient: BsdasriRecipientWhere
  """
  (Optionnel) Filtre sur le statut des bordereaux
  Si aucun filtre n'est passé, les bordereaux seront retournés quel que soit leur statut
  Défaut à vide.
  """
  status: BsdasriStatus
  transporter: BsdasriTransporterWhere
  updatedAt: DateFilter
}

input BsdasriEmitterWhere {
  company: BsdasriCompanyWhere
  signature: BsdasriSignatureWhere
}

input BsdasriCompanyWhere {
  siret: String!
}

input BsdasriSignatureWhere {
  date: DateFilter!
}

enum processingOperationTypes {
  D10
  D12
  D9
  R1
  R12
}

input BsdasriRecipientWhere {
  company: BsdasriCompanyWhere
  signature: BsdasriSignatureWhere
}

input BsdasriTransporterWhere {
  company: BsdasriCompanyWhere
  signature: BsdasriSignatureWhere
}

type BsdasriConnection {
  edges: [BsdasriEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BsdasriEdge {
  cursor: String!
  node: Bsdasri!
}

input OrderBy {
  emitter: OrderType
  readableId: OrderType
  recipient: OrderType
  type: OrderType
  waste: OrderType
}

enum OrderType {
  ASC
  DESC
}

input BsdWhere {
  emitter: String
  isArchivedFor: [String!]
  isCollectedFor: [String!]
  isDraftFor: [String!]
  isFollowFor: [String!]
  isForActionFor: [String!]
  isToCollectFor: [String!]
  readableId: String
  recipient: String
  types: [BsdType!]
  waste: String
}

enum BsdType {
  BSDASRI
  BSDD
  BSVHU
}

type BsdConnection {
  edges: [BsdEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BsdEdge {
  cursor: String!
  node: Bsd!
}

union Bsd = Bsdasri | Bsvhu | Form

type Bsvhu {
  """Date de création"""
  createdAt: DateTime!
  """Destinataire du bordereau"""
  destination: BsvhuDestination
  """Émetteur du bordereau"""
  emitter: BsvhuEmitter
  """Numéro unique attribué par Trackdéchets"""
  id: ID!
  """Identification des VHUs"""
  identification: BsvhuIdentification
  """Indique si le bordereau est à l'état de brouillon"""
  isDraft: Boolean!
  metadata: BsvhuMetadata!
  """Conditionnement du déchet"""
  packaging: BsvhuPackaging
  """Quantité de VHUs"""
  quantity: BsvhuQuantity
  """Status du bordereau"""
  status: BsvhuStatus!
  """Transporteur"""
  transporter: BsvhuTransporter
  """Date de dernière modification"""
  updatedAt: DateTime!
  """Code déchet. Presque toujours 16 01 06"""
  wasteCode: String
}

type BsvhuDestination {
  """Numéro d'agrément de receveur"""
  agrementNumber: String
  """Coordonnées de l'entreprise qui recoit les déchets"""
  company: FormCompany
  """Informations sur l'opétation de traitement"""
  operation: BsvhuOperation
  """Opération d'élimination / valorisation prévue (code D/R)"""
  plannedOperationCode: String
  """Informations de réception"""
  reception: BsvhuReception
  """Type de receveur: broyeur ou second centre VHU"""
  type: BsvhuDestinationType
}

type BsvhuOperation {
  """Opération de traitement réalisée (R4 ou R12)"""
  code: String
  """Date de réalisation"""
  date: DateTime
  """Broyeur de destination, à remplir uniquement lorsque la destination est lui même un centre VHU"""
  nextDestination: BsvhuNextDestination
  signature: Signature
}

type BsvhuNextDestination {
  company: FormCompany
}

type BsvhuReception {
  """Lot accepté oui/non"""
  acceptationStatus: BsvhuAcceptationStatus
  """Date de présentation sur site"""
  date: DateTime
  """Identification éventuelle des VHU à la reception (numéro de lots ou d'ordre)"""
  identification: BsvhuIdentification
  """Quantité réelle reçue"""
  quantity: BsvhuQuantity
  """Motif de refus"""
  refusalReason: String
}

enum BsvhuAcceptationStatus {
  ACCEPTED
  PARTIALLY_REFUSED
  REFUSED
}

type BsvhuIdentification {
  numbers: [String]
  type: BsvhuIdentificationType
}

enum BsvhuIdentificationType {
  NUMERO_ORDRE_LOTS_SORTANTS
  NUMERO_ORDRE_REGISTRE_POLICE
}

type BsvhuQuantity {
  number: Int
  tons: Float
}

enum BsvhuDestinationType {
  BROYEUR
  DEMOLISSEUR
}

type BsvhuEmitter {
  """Numéro d'agrément émetteur"""
  agrementNumber: String
  """Coordonnées de l'entreprise émétrice"""
  company: FormCompany
  """Déclaration générale de l'émetteur du bordereau"""
  emission: BsvhuEmission
}

type BsvhuEmission {
  signature: Signature
}

type BsvhuMetadata {
  errors: [BsvhuError!]!
}

type BsvhuError {
  message: String!
  path: String!
  requiredFor: SignatureTypeInput!
}

enum SignatureTypeInput {
  EMISSION
  OPERATION
  TRANSPORT
}

enum BsvhuPackaging {
  LOT
  UNITE
}

enum BsvhuStatus {
  INITIAL
  PROCESSED
  REFUSED
  SENT
  SIGNED_BY_PRODUCER
}

type BsvhuTransporter {
  """Coordonnées de l'entreprise de transport"""
  company: FormCompany
  """Récépissé transporteur"""
  recepisse: BsvhuRecepisse
  """Informations liés au transport"""
  transport: BsvhuTransport
}

type BsvhuRecepisse {
  department: String
  number: String
  validityLimit: DateTime
}

type BsvhuTransport {
  signature: Signature
  """Date de prise en charge"""
  takenOverAt: DateTime
}

input BsffWhere {
  destination: BsffWhereDestination
  emitter: BsffWhereEmitter
  transporter: BsffWhereTransporter
}

input BsffWhereDestination {
  company: BsffWhereCompany
}

input BsffWhereCompany {
  siret: String!
}

input BsffWhereEmitter {
  company: BsffWhereCompany
}

input BsffWhereTransporter {
  company: BsffWhereCompany
}

type BsffConnection {
  edges: [BsffEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BsffEdge {
  cursor: String!
  node: Bsff!
}

type Bsff {
  """Liste des bordereaux que celui-ci regroupe, dans le cas d'un regroupement, reconditionnement ou d'une réexpédition."""
  bsffs: [Bsff!]!
  """
  Destination du déchet, qui peut le réceptionner pour traitement, regroupement, reconditionnement ou réexpedition.
  Un nouveau bordereau doit être créé si le déchet connaît un nouveau parcours,
  par exemple si il quitte une installation de collecte pour un centre de traitement.
  """
  destination: BsffDestination
  """
  Émetteur du déchet, qui n'est pas nécessairement le producteur.
  Il s'agit par exemple de l'opérateur ayant collecté des fluides lors d'interventions,
  ou alors d'une installation de collecte qui procède à la réexpédition pour traitement final.
  """
  emitter: BsffEmitter
  """
  Liste des fiches d'intervention associés à ce bordereau.
  Habituellement renseigné par un opérateur lors de son intervention.
  """
  ficheInterventions: [BsffFicheIntervention!]!
  """
  Identifiant unique assigné par Trackdéchets.
  Il est à utiliser pour les échanges avec l'API.
  """
  id: ID!
  """Liste des contenants utilisés pour le transport des fluides."""
  packagings: [BsffPackaging!]!
  """Quantité totale du déchet, qu'elle soit réelle ou estimée."""
  quantity: BsffQuantity
  """
  Transporteur du déchet, effectue l'enlèvement du déchet auprès de l'émetteur et vers la destination.
  À noter que l'émetteur peut également être transporteur,
  par exemple dans le cas de l'opérateur qui dépose lui même ses contenants auprès d'une installation de collecte.
  """
  transporter: BsffTransporter
  """Description du déchet et ses mentions associées."""
  waste: BsffWaste
}

type BsffDestination {
  """Numéro CAP."""
  cap: String
  """Entreprise réceptionant le déchet."""
  company: FormCompany!
  """Déclaration de traitement du déchet."""
  operation: BsffOperation
  """Opération de traitement prévu initialement."""
  plannedOperation: BsffPlannedOperation!
  """Déclaration de réception du déchet."""
  reception: BsffReception
}

type BsffOperation implements IBsffOperation {
  """Code de l'opération de traitement."""
  code: BsffOperationCode
  """Qualification plus précise du type d'opération réalisée."""
  qualification: BsffOperationQualification!
  """Signature de la destination lors du traitement."""
  signature: Signature
}

interface IBsffOperation {
  """Code de l'opération de traitement."""
  code: BsffOperationCode
  """Qualification plus précise du type d'opération réalisée."""
  qualification: BsffOperationQualification!
}

"""Liste des codes de traitement possible."""
enum BsffOperationCode {
  D10
  D13
  D14
  R12
  R2
}

"""
Liste des qualifications de traitement possible.
Attention, certaines combinaisons de code et qualification ne sont pas possibles.
Par exemple, seul le code D 10 peut être associé à une incinération.
"""
enum BsffOperationQualification {
  INCINERATION
  RECONDITIONNEMENT
  RECUPERATION_REGENERATION
  REEXPEDITION
  REGROUPEMENT
}

type BsffPlannedOperation implements IBsffOperation {
  """Code de l'opération de traitement prévu."""
  code: BsffOperationCode
  """Qualification plus précise du type d'opération prévu."""
  qualification: BsffOperationQualification!
}

type BsffReception {
  """Date de réception du déchet."""
  date: DateTime!
  """Quantité totale du déchet, qu'elle soit réelle ou estimée."""
  kilos: Int!
  """En cas de refus, le motif."""
  refusal: String
  """Signature de la destination lors de l'acceptation ou du refus du déchet."""
  signature: Signature
}

type BsffEmitter {
  """Entreprise émettant le déchet."""
  company: FormCompany!
  """Déclaration de l'émetteur lors de l'enlèvement par le transporteur."""
  emission: BsffEmission
}

type BsffEmission {
  """Signature de l'émetteur lors de l'enlèvement par le transporteur."""
  signature: Signature!
}

type BsffFicheIntervention {
  """Poids total des fluides récupérés lors de cette intervention."""
  kilos: Int!
  """Numéro de la fiche d'intervention, habituellement renseigné par l'opérateur."""
  numero: String!
  """
  Détenteur de l'équipement sur lequel est intervenu l'opérateur.
  À noter que dû à la valeur commerciale de ces informations, leur visibilité est limité aux acteurs en contact direct.
  """
  owner: BsffOwner
  """Code postal du lieu où l'intervention a eu lieu."""
  postalCode: String!
}

type BsffOwner {
  """Entreprise détentrice de l'équipement."""
  company: FormCompany!
}

type BsffPackaging {
  """Volume en litres des fluides à l'intérieur du contenant."""
  litres: Int!
  """Numéro du contenant."""
  numero: String!
  """Type de contenant."""
  type: BsffPackagingType!
}

enum BsffPackagingType {
  BOUTEILLE
}

type BsffQuantity {
  """Si il s'agit d'une estimation ou d'un poids réel."""
  isEstimate: Boolean!
  """Poids total du déchet en kilos."""
  kilos: Int!
}

type BsffTransporter {
  """Entreprise responsable du transport du déchet."""
  company: FormCompany!
  """Récépissé du transporteur, à moins d'être exempté."""
  recepisse: BsffTransporterRecepisse
  """Déclaration du transporteur lors de l'enlèvement auprès de l'émetteur."""
  transport: BsffTransport
}

type BsffTransporterRecepisse {
  """Département auquel est lié le récépissé."""
  department: String!
  """Numéro du récépissé."""
  number: String!
  """Date limite de validité du récépissé."""
  validityLimit: DateTime!
}

type BsffTransport {
  """Mode de transport utilisé."""
  mode: TransportMode!
  """Signature du transporteur lors de l'enlèvement auprès de l'émetteur."""
  signature: Signature!
}

type BsffWaste {
  """Mention ADR."""
  adr: String!
  """Code déchet."""
  code: String!
  """Description du déchet, permet de le qualifier de façon plus précise."""
  description: String!
}

input BsvhuWhere {
  _and: [BsvhuWhere!]
  _not: [BsvhuWhere!]
  _or: [BsvhuWhere!]
  createdAt: DateFilter
  destination: BsvhuDestinationWhere
  emitter: BsvhuEmitterWhere
  """(Optionnel) Permet de récupérer uniquement les bordereaux en brouillon"""
  isDraft: Boolean
  """
  (Optionnel) Filtre sur le statut des bordereaux
  Si aucun filtre n'est passé, les bordereaux seront retournés quel que soit leur statut
  Défaut à vide.
  """
  status: BsvhuStatus
  transporter: BsvhuTransporterWhere
  updatedAt: DateFilter
}

input BsvhuDestinationWhere {
  company: BsvhuCompanyWhere
  operation: BsvhuOperationWhere
}

input BsvhuCompanyWhere {
  siret: String!
}

input BsvhuOperationWhere {
  signature: BsvhuSignatureWhere
}

input BsvhuSignatureWhere {
  date: DateFilter!
}

input BsvhuEmitterWhere {
  company: BsvhuCompanyWhere
  emission: BsvhuEmissionWhere
}

input BsvhuEmissionWhere {
  signature: BsvhuSignatureWhere
}

input BsvhuTransporterWhere {
  company: BsvhuCompanyWhere
  transport: BsvhuTransportWhere
}

input BsvhuTransportWhere {
  signature: BsvhuSignatureWhere
}

type BsvhuConnection {
  edges: [BsvhuEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BsvhuEdge {
  cursor: String!
  node: Bsvhu!
}

input CompanyForVerificationWhere {
  verificationStatus: CompanyVerificationStatus
}

"""État du processus de vérification de l'établissement"""
enum CompanyVerificationStatus {
  """
  Les vérifications manuelles n'ont pas abouties, une lettre a été envoyée à l'adresse enregistrée
  auprès du registre du commerce et des sociétés
  """
  LETTER_SENT
  """L'établissement vient d'être crée, en attente de vérifications manuelles par l'équipe Trackdéchets"""
  TO_BE_VERIFIED
  """L'établissement est vérifié"""
  VERIFIED
}

type CompanyForVerificationConnection {
  companies: [CompanyForVerification!]!
  totalCount: Int!
}

type CompanyForVerification {
  admin: AdminForVerification
  companyTypes: [CompanyType!]!
  createdAt: DateTime!
  id: ID!
  name: String!
  siret: String!
  verificationComment: String
  verificationMode: CompanyVerificationMode
  verificationStatus: CompanyVerificationStatus!
  verifiedAt: DateTime
}

type AdminForVerification {
  email: String!
  name: String
  phone: String
}

"""Profil entreprise"""
enum CompanyType {
  """Courtier"""
  BROKER
  """Installation de Transit, regroupement ou tri de déchets"""
  COLLECTOR
  """Éco-organisme"""
  ECO_ORGANISME
  """Producteur de déchet"""
  PRODUCER
  """Négociant"""
  TRADER
  """Transporteur"""
  TRANSPORTER
  """Installation de collecte de déchets apportés par le producteur initial"""
  WASTE_CENTER
  """Installation de traitement de VHU (casse automobile et/ou broyeur agréé)"""
  WASTE_VEHICLES
  """Installation de traitement"""
  WASTEPROCESSOR
}

enum CompanyVerificationMode {
  LETTER
  MANUAL
}

"""Information sur un établissement accessible publiquement"""
type CompanyPublic {
  """Adresse de l'établissement"""
  address: String
  """Récépissé courtier associé à cet établissement (le cas échant)"""
  brokerReceipt: BrokerReceipt
  """
  Profil de l'établissement sur Trackdéchets
  ayant pour valeur un tableau vide quand l'établissement
  n'est pas inscrit sur la plateforme `isRegistered=false`
  """
  companyTypes: [CompanyType!]!
  """Email de contact"""
  contactEmail: String
  """Numéro de téléphone de contact"""
  contactPhone: String
  """Liste des agréments de l'éco-organisme"""
  ecoOrganismeAgreements: [URL!]!
  """État administratif de l'établissement. A = Actif, F = Fermé"""
  etatAdministratif: String
  """
  Installation classée pour la protection de l'environnement (ICPE)
  associé à cet établissement
  """
  installation: Installation
  """Si oui on non cet établissement est inscrit sur la plateforme Trackdéchets"""
  isRegistered: Boolean
  """Libellé NAF"""
  libelleNaf: String
  """Code NAF"""
  naf: String
  """Nom de l'établissement"""
  name: String
  """SIRET de l'établissement"""
  siret: String
  """Récépissé négociant associé à cet établissement (le cas échant)"""
  traderReceipt: TraderReceipt
  """Récépissé transporteur associé à cet établissement (le cas échéant)"""
  transporterReceipt: TransporterReceipt
  """Agrément VHU broyeur (le cas échéant, pour les profils VHU)"""
  vhuAgrementBroyeur: VhuAgrement
  """Agrément VHU démolisseur (le cas échéant, pour les profils VHU)"""
  vhuAgrementDemolisseur: VhuAgrement
  """Site web"""
  website: String
}

"""Récépissé courtier"""
type BrokerReceipt {
  """Département ayant enregistré la déclaration"""
  department: String!
  id: ID!
  """Numéro de récépissé courtier"""
  receiptNumber: String!
  """Limite de validité du récépissé"""
  validityLimit: DateTime!
}

"""Chaîne de caractère au format URL, débutant par un protocole http(s)."""
scalar URL

"""Installation pour la protection de l'environnement (ICPE)"""
type Installation {
  """Identifiant S3IC"""
  codeS3ic: String
  """Liste des déclarations GEREP"""
  declarations: [Declaration!]
  """Liste des rubriques associées"""
  rubriques: [Rubrique!]
  """URL de la fiche ICPE sur Géorisques"""
  urlFiche: String
}

"""Représente une ligne dans une déclaration GEREP"""
type Declaration {
  """Année de la déclaration"""
  annee: String
  """Code du déchet"""
  codeDechet: String
  """Type de déclaration GEREP: producteur ou traiteur"""
  gerepType: GerepType
  """Description du déchet"""
  libDechet: String
}

"""Type d'une déclaration GEREP"""
enum GerepType {
  Producteur
  Traiteur
}

"""
Rubrique ICPE d'un établissement avec les autorisations associées
Pour plus de détails, se référer à la
[nomenclature des ICPE](https://www.georisques.gouv.fr/articles-risques/les-installations-classees-pour-la-protection-de-lenvironnement#nomenclature-des-installations-classees)
"""
type Rubrique {
  """
  Description de l'activité:
  Ex: traitement thermique de déchets dangereux
  """
  activite: String
  """Alinéa pour la rubrique concerné"""
  alinea: String
  """Catégorie d'établissement associé: TTR, VHU, Traitement"""
  category: String!
  """État de l'activité, ex: 'En fonct', 'À l'arrêt'"""
  etatActivite: String
  """Régime autorisé pour la rubrique: déclaratif, autorisation, seveso, etc"""
  regimeAutorise: String
  """
  Numéro de rubrique tel que défini dans la nomenclature des ICPE
  Ex: 2710
  """
  rubrique: String!
  """Unité utilisé pour le volume autorisé"""
  unite: String
  """Volume autorisé"""
  volume: String
  """Type de déchets autorisé"""
  wasteType: WasteType
}

"""Type de déchets autorisé pour une rubrique"""
enum WasteType {
  """Déchet dangereux"""
  DANGEROUS
  """Déchet inerte"""
  INERTE
  """Déchet non dangereux"""
  NOT_DANGEROUS
}

"""Récépissé négociant"""
type TraderReceipt {
  """Département ayant enregistré la déclaration"""
  department: String!
  id: ID!
  """Numéro de récépissé négociant"""
  receiptNumber: String!
  """Limite de validité du récépissé"""
  validityLimit: DateTime!
}

"""Récépissé transporteur"""
type TransporterReceipt {
  """Département ayant enregistré la déclaration"""
  department: String!
  id: ID!
  """Numéro de récépissé transporteur"""
  receiptNumber: String!
  """Limite de validité du récépissé"""
  validityLimit: DateTime!
}

"""Agrément VHU"""
type VhuAgrement {
  """Numéro d'agrément VHU"""
  agrementNumber: String!
  """Département ayant enregistré la déclaration"""
  department: String!
  id: ID!
}

"""
Eco-organisme
Les éco-organismes n'apparaissent pas en case 1 du bordereau mais sont quand même responsables du déchet.
C'est l'entreprise de collecte de déchet qui apparait en case 1.
Pour pouvoir saisir un éco-organisme, le détenteur du déchet doit être défini comme 'Autre détenteur'.
Seul un éco-organisme enregistré dans Trackdéchet peut être associé.
"""
type EcoOrganisme {
  """Adresse de l'éco-organisme"""
  address: String!
  id: ID!
  """Nom de l'éco-organisme"""
  name: String!
  """Siret de l'éco-organisme"""
  siret: String!
}

"""Type d'établissement favoris"""
enum FavoriteType {
  BROKER
  DESTINATION
  EMITTER
  NEXT_DESTINATION
  RECIPIENT
  TEMPORARY_STORAGE_DETAIL
  TRADER
  TRANSPORTER
}

"""
Information sur établissement accessible dans la liste des favoris
La liste des favoris est constituée à partir de l'historique des
BSD édités
"""
type CompanyFavorite {
  """Adresse de l'établissement"""
  address: String
  """Récépissé courtier associé à cet établissement (le cas échant)"""
  brokerReceipt: BrokerReceipt
  """Nom du contact"""
  contact: String
  """Email de contact"""
  mail: String
  """Nom de l'établissement"""
  name: String
  """Numéro de téléphone"""
  phone: String
  """SIRET de l'établissement"""
  siret: String
  """Récépissé négociant associé à cet établissement (le cas échant)"""
  traderReceipt: TraderReceipt
  """Récépissé transporteur associé à cet établissement (le cas échéant)"""
  transporterReceipt: TransporterReceipt
  """Agrément VHU broyeur (le cas échéant, pour les profils VHU)"""
  vhuAgrementBroyeur: VhuAgrement
  """Agrément VHU démolisseur (le cas échéant, pour les profils VHU)"""
  vhuAgrementDemolisseur: VhuAgrement
}

enum FormRole {
  """Les BSD's dont je suis le courtier"""
  BROKER
  """Les BSD's dont je suis éco-organisme"""
  ECO_ORGANISME
  """Les BSD's dont je suis l'émetteur"""
  EMITTER
  """Les BSD's dont je suis la destination de traitement"""
  RECIPIENT
  """Les BSD's dont je suis le négociant"""
  TRADER
  """Les BSD's dont je suis transporteur"""
  TRANSPORTER
}

"""Informations du cycle de vie des bordereaux"""
type formsLifeCycleData {
  """Nombre de changements de statuts renvoyés"""
  count: Int
  """Dernier ID de la page, à passer dans cursorAfter ou cursorBefore de la query formsLifeCycle"""
  endCursor: ID
  """pagination, indique si d'autres pages existent après"""
  hasNextPage: Boolean
  """pagination, indique si d'autres pages existent avant"""
  hasPreviousPage: Boolean
  """Premier id de la page, à passer dans cursorAfter ou cursorBefore de la query formsLifeCycle"""
  startCursor: ID
  """Liste des changements de statuts"""
  statusLogs: [StatusLog!]!
}

"""Changement de statut d'un bordereau"""
type StatusLog {
  """BSD concerné"""
  form: StatusLogForm
  """Identifiant du log"""
  id: ID
  """Date à laquelle le changement de statut a été effectué"""
  loggedAt: DateTime
  """Statut du bordereau après le changement de statut"""
  status: FormStatus
  """Valeur des champs transmis lors du changement de statut (eg. receivedBY, processingOperationDescription)"""
  updatedFields: JSON
  """Utilisateur à l'origine de la modification"""
  user: StatusLogUser
}

"""Information sur un BSD dans les logs de modifications de statuts"""
type StatusLogForm {
  """Identifiant du BSD"""
  id: ID
  """N° du bordereau"""
  readableId: String @deprecated(reason: "Le readableId apparaît sur le CERFA mais l'id doit être utilisé comme identifiant.")
}

scalar JSON

"""Utilisateur ayant modifié le BSD"""
type StatusLogUser {
  email: String
  id: ID
}

"""Format de l'export du registre"""
enum FormsRegisterExportFormat {
  """Fichier csv"""
  CSV
  """Fichier Excel"""
  XLSX
}

"""
Modèle de registre réglementaire tels que décrits dans l'arrêté du 29 février 2012 fixant
le contenu des registres mnetionnées aux articles R. 541-43 et R. 541-46 du code de l'environnement
https://www.legifrance.gouv.fr/affichTexte.do?cidTexte=JORFTEXT000025454959&categorieLien=id
"""
enum FormsRegisterExportType {
  """Registre exhaustif, déchets entrants et sortants"""
  ALL
  """Registre courtier"""
  BROKERED
  """
  Registre traiteur, TTR
  Art 2: Les exploitants des installations de transit, de regroupement ou de traitement de déchets,
  notamment de tri, établissent et tiennent à jour un registre chronologique où sont consignés
  tous les déchets entrants.
  """
  INCOMING
  """
  Registre producteur, déchets sortants
  Art 1: Les exploitants des établissements produisant ou expédiant des déchets tiennent à jour
  un registre chronologique où sont consignés tous les déchets sortants.
  """
  OUTGOING
  """
  Registre négociants
  Art 4: Les négociants tiennent à jour un registre chronologique des déchets détenus.
  """
  TRADED
  """
  Registre transporteur
  Art 3: Les transporteurs et les collecteurs de déchets tiennent à jour un registre chronologique
  des déchets transportés ou collectés.
  """
  TRANSPORTED
}

"""
Invitation à rejoindre une entreprise
lorsque l'utilisateur invité n'est pas encore inscrit
sur Trackdéchets
"""
type Invitation {
  """Date when the invitation was accepted and the user joined"""
  acceptedAt: DateTime
  """Siret de l'entreprise à laquelle l'utilisateur est invité"""
  companySiret: String!
  """Email de l'utilisateur invité"""
  email: String!
  """Hash unique inclus dans le lien d'invitation envoyé par email"""
  hash: String!
  """Identifiant unique"""
  id: ID!
  """Rôle de l'utilisateur au sein de l'entreprise"""
  role: UserRole!
}

"""
Liste les différents rôles d'un utilisateur au sein
d'un établissement.
Les admins peuvent:
* consulter/éditer les bordereaux
* gérer les utilisateurs de l'établissement
* éditer les informations de la fiche entreprise
* demander le renouvellement du code de signature
* Éditer les informations de la fiche entreprise
Les membres peuvent:
* consulter/éditer les bordereaux
* consulter le reste des informations
Vous pouvez consulter [cette page](https://docs.google.com/spreadsheets/d/12K9Bd2k5l4uqXhS0h5uI00lNEzW7C-1t-NDOyxy8aKk/edit#gid=0)
pour le détail de chacun des rôles
"""
enum UserRole {
  ADMIN
  MEMBER
}

"""Représente un utilisateur sur la plateforme Trackdéchets"""
type User {
  """Liste des établissements dont l'utilisateur est membre"""
  companies: [CompanyPrivate!]!
  """Email de l'utiliateur"""
  email: String!
  """Identifiant opaque"""
  id: ID!
  """Qualité d'administrateur. Rôle reservé aux agents de l'administration"""
  isAdmin: Boolean
  """Nom de l'utilisateur"""
  name: String
  """Numéro de téléphone de l'utilisateur"""
  phone: String
}

"""Information sur un établissement accessible par un utilisateur membre"""
type CompanyPrivate {
  """Adresse de l'établissement"""
  address: String
  """Récépissé courtier (le cas échéant, pour les profils courtier)"""
  brokerReceipt: BrokerReceipt
  """Profil de l'établissement"""
  companyTypes: [CompanyType!]!
  """Email de contact (visible sur la fiche entreprise)"""
  contactEmail: String
  """Numéro de téléphone de contact (visible sur la fiche entreprise)"""
  contactPhone: String
  """Liste des agréments de l'éco-organisme"""
  ecoOrganismeAgreements: [URL!]!
  """Identifiant GEREP"""
  gerepId: String
  """
  Nom d'usage de l'entreprise qui permet de différencier
  différents établissements ayant le même nom
  """
  givenName: String
  """Identifiant opaque"""
  id: ID!
  """
  Installation classée pour la protection de l'environnement (ICPE)
  associé à cet établissement (le cas échéant)
  """
  installation: Installation
  """Libellé NAF de l'établissement"""
  libelleNaf: String
  """Code NAF de l'établissement"""
  naf: String
  """Nom de l'établissement"""
  name: String
  """Code de signature permettant de signer les BSD"""
  securityCode: Int!
  """SIRET de l'établissement"""
  siret: String!
  """Récépissé négociant (le cas échéant, pour les profils négociant)"""
  traderReceipt: TraderReceipt
  """Récépissé transporteur (le cas échéant, pour les profils transporteur)"""
  transporterReceipt: TransporterReceipt
  """Rôle de l'utilisateur authentifié cau sein de cet établissement"""
  userRole: UserRole
  """Liste des utilisateurs appartenant à cet établissement"""
  users: [CompanyMember!]
  """État du processus de vérification de l'établissement"""
  verificationStatus: CompanyVerificationStatus!
  """Agrément broyeur (le cas échéant, pour les profils VHU)"""
  vhuAgrementBroyeur: VhuAgrement
  """Agrément démolisseur (le cas échéant, pour les profils VHU)"""
  vhuAgrementDemolisseur: VhuAgrement
  """Site web (visible sur la fiche entreprise)"""
  website: String
}

"""Information sur utilisateur au sein d'un établissement"""
type CompanyMember {
  """Email"""
  email: String!
  """Identifiant opaque"""
  id: ID!
  """Si oui ou non l'email de l'utilisateur a été confirmé"""
  isActive: Boolean
  """Si oui ou non cet utilisateur correspond à l'utilisateur authentifié"""
  isMe: Boolean
  """Si oui ou non une une invitation à joindre l'établissement est en attente"""
  isPendingInvitation: Boolean
  """Nom de l'utilisateur"""
  name: String
  """Rôle de l'utilisateur dans l'établissement (admin ou membre)"""
  role: UserRole
}

"""
Demande de rattachement à un établissement effectué par
un utilisateur.
"""
type MembershipRequest {
  """Email de l'utilisateur faisant la demande"""
  email: String!
  id: ID!
  """Nom de l'établissement"""
  name: String!
  """
  Liste des adresses email correspondant aux comptes administrateurs à qui la demande
  de rattachement a été envoyée. Les adresses emails sont partiellement masquées de la
  façon suivante j********w@trackdechets.fr
  """
  sentTo: [String!]!
  """SIRET de l'établissement"""
  siret: String!
  """Statut de la demande de rattachement"""
  status: MembershipRequestStatus!
}

"""
Différents statuts possibles pour une demande de rattachement
à un établissement
"""
enum MembershipRequestStatus {
  ACCEPTED
  PENDING
  REFUSED
}

"""Information sur un établissement accessible publiquement en recherche"""
type CompanySearchResult {
  """Adresse de l'établissement"""
  address: String
  """Récépissé courtier associé à cet établissement (le cas échant)"""
  brokerReceipt: BrokerReceipt
  """Code commune de l'établissement"""
  codeCommune: String
  """État administratif de l'établissement. A = Actif, F = Fermé"""
  etatAdministratif: String
  """
  Installation classée pour la protection de l'environnement (ICPE)
  associé à cet établissement
  """
  installation: Installation
  """Libellé NAF"""
  libelleNaf: String
  """Code NAF"""
  naf: String
  """Nom de l'établissement"""
  name: String
  """SIRET de l'établissement"""
  siret: String
  """Récépissé négociant associé à cet établissement (le cas échant)"""
  traderReceipt: TraderReceipt
  """Récépissé transporteur associé à cet établissement (le cas échéant)"""
  transporterReceipt: TransporterReceipt
  """Agrément VHU broyeur (le cas échéant, pour les profils VHU)"""
  vhuAgrementBroyeur: VhuAgrement
  """Agrément VHU démolisseur (le cas échéant, pour les profils VHU)"""
  vhuAgrementDemolisseur: VhuAgrement
}

"""Statistiques d'un établissement"""
type CompanyStat {
  """Établissement"""
  company: FormCompany
  """Liste des statistiques"""
  stats: [Stat!]!
}

"""Statistiques"""
type Stat {
  """Quantité entrante"""
  incoming: Float!
  """Qantité sortante"""
  outgoing: Float!
  """Code déchet"""
  wasteCode: String!
}

type Mutation {
  """
  USAGE INTERNE
  Accepte une demande de rattachement à un établissement
  en spécifiant le rôle accordé au nouvel utilisateur
  """
  acceptMembershipRequest(id: ID!, role: UserRole!): CompanyPrivate!
  """Mutation permettant d'ajouter une fiche d'intervention à un bordereau existant."""
  addFicheInterventionBsff(id: ID!, input: BsffFicheInterventionInput!, numero: String!): BsffFicheIntervention!
  """
  USAGE INTERNE
  Modifie le mot de passe d'un utilisateur
  """
  changePassword(newPassword: String!, oldPassword: String!): User!
  """
  USAGE INTERNE
  Crée un récépissé courtier
  """
  createBrokerReceipt(input: CreateBrokerReceiptInput!): BrokerReceipt
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un Bsda
  """
  createBsda(input: BsdaInput!): Bsda
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un nouveau dasri
  """
  createBsdasri(
    """Payload de création d'un dasri"""
    bsdasriCreateInput: BsdasriCreateInput!
  ): Bsdasri!
  """Mutation permettant de créer un nouveau bordereau de suivi de fluides frigorigènes."""
  createBsff(input: BsffInput!): Bsff!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un BSVHU
  """
  createBsvhu(input: BsvhuInput!): Bsvhu
  """
  USAGE INTERNE
  Rattache un établissement à l'utilisateur authentifié
  """
  createCompany(companyInput: PrivateCompanyInput!): CompanyPrivate!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un Bsda en brouillon
  """
  createDraftBsda(input: BsdaInput!): Bsda
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un nouveau dasri en brouillon
  """
  createDraftBsdasri(
    """Payload de création d'un dasri brouillon"""
    bsdasriCreateInput: BsdasriCreateInput!
  ): Bsdasri!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Crée un BSVHU en brouillon
  """
  createDraftBsvhu(input: BsvhuInput!): Bsvhu
  """Crée un nouveau bordereau"""
  createForm(
    """Payload de création d'un bordereau"""
    createFormInput: CreateFormInput!
  ): Form!
  """
  USAGE INTERNE
  Crée un récépissé négociant
  """
  createTraderReceipt(input: CreateTraderReceiptInput!): TraderReceipt
  """
  USAGE INTERNE
  Crée un récépissé transporteur
  """
  createTransporterReceipt(input: CreateTransporterReceiptInput!): TransporterReceipt
  """
  USAGE INTERNE
  Récupère une URL signé pour l'upload d'un fichier
  """
  createUploadLink(
    """nom du fichier"""
    fileName: String!
    """type de fichier"""
    fileType: String!
  ): UploadLink!
  """
  USAGE INTERNE
  Crée un agrément VHU
  """
  createVhuAgrement(input: CreateVhuAgrementInput!): VhuAgrement
  """
  USAGE INTERNE
  Supprime un récépissé courtier
  """
  deleteBrokerReceipt(input: DeleteBrokerReceiptInput!): BrokerReceipt
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Supprime un BSDASRI
  """
  deleteBsdasri(
    """ID d'un Dasri"""
    id: ID!
  ): Bsdasri
  """
  Mutation permettant de supprimer un bordereau existant de suivi de fluides frigorigènes.
  À condition qu'il n'ait pas encore été signé.
  """
  deleteBsff(id: ID!): Bsff!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Supprime un BSVHU
  """
  deleteBsvhu(
    """ID d'un BSD VHU"""
    id: ID!
  ): Bsvhu
  """Mutation permettant de supprimer une fiche d'intervention lié à un bordereau existant."""
  deleteFicheInterventionBsff(id: ID!, numero: String!): BsffFicheIntervention!
  """Supprime un BSD"""
  deleteForm(
    """ID d'un BSD"""
    id: ID!
  ): Form
  """
  USAGE INTERNE
  Supprime une invitation à un établissement
  """
  deleteInvitation(email: String!, siret: String!): CompanyPrivate!
  """
  USAGE INTERNE
  Supprime un récépissé négociant
  """
  deleteTraderReceipt(input: DeleteTraderReceiptInput!): TraderReceipt
  """
  USAGE INTERNE
  Supprime un récépissé transporteur
  """
  deleteTransporterReceipt(input: DeleteTransporterReceiptInput!): TransporterReceipt
  """
  USAGE INTERNE
  Supprime un agrément VHU
  """
  deleteVhuAgrement(input: DeleteVhuAgrementInput!): VhuAgrement
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Duplique un Bsda
  """
  duplicateBsda(
    """ID d'un BSD"""
    id: ID!
  ): Bsda
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Duplique un bordereau Dasri
  """
  duplicateBsdasri(
    """ID d'un Bsdasri"""
    id: ID!
  ): Bsdasri
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Duplique un BSVHU
  """
  duplicateBsvhu(
    """ID d'un BSD VHU"""
    id: ID!
  ): Bsvhu
  """Duplique un BSD"""
  duplicateForm(
    """ID d'un BSD"""
    id: ID!
  ): Form
  """
  USAGE INTERNE
  Met à jour les informations de l'utilisateur
  """
  editProfile(email: String, name: String, phone: String): User!
  """Édite un segment existant"""
  editSegment(id: ID!, nextSegmentInfo: NextSegmentInfoInput!, siret: String!): TransportSegment
  """
  Permet d'importer les informations d'un BSD papier dans Trackdéchet après la réalisation de l'opération
  de traitement. Le BSD signé papier original doit être conservé à l'installation de destination qui doit
  être en mesure de retrouver le bordereau papier correspondant à un bordereau numérique. Le champ `customId`
  de l'input peut-être utilisé pour faire le lien.
  """
  importPaperForm(input: ImportPaperFormInput!): Form
  """
  USAGE INTERNE
  Invite un nouvel utilisateur à un établissement
  """
  inviteUserToCompany(email: String!, role: UserRole!, siret: String!): CompanyPrivate!
  """
  USAGE INTERNE
  Active le compte d'un utilisateur invité
  """
  joinWithInvite(inviteHash: String!, name: String!, password: String!): User!
  """
  DEPRECATED - La récupération de token pour le compte de tiers
  doit s'effectuer avec le protocole OAuth2
  
  Récupére un token à partir de l'email et du mot de passe
  d'un utilisateur.
  """
  login(email: String!, password: String!): AuthPayload!
  """Valide l'acceptation du BSD"""
  markAsAccepted(
    """Informations liées à l'arrivée"""
    acceptedInfo: AcceptedFormInput!
    """ID d'un BSD"""
    id: ID!
  ): Form
  """Valide le traitement d'un BSD"""
  markAsProcessed(
    """ID d'un BSD"""
    id: ID!
    """Informations liées au traitement"""
    processedInfo: ProcessedFormInput!
  ): Form
  """Valide la réception d'un BSD"""
  markAsReceived(
    """ID d'un BSD"""
    id: ID!
    """Informations liées à la réception"""
    receivedInfo: ReceivedFormInput!
  ): Form
  """Valide la complétion des cadres 14 à 19 lors d'un entreposage provisoire ou reconditionnement"""
  markAsResealed(id: ID!, resealedInfos: ResealedFormInput!): Form
  """Valide l'envoi du BSD après un entreposage provisoire ou reconditionnement"""
  markAsResent(id: ID!, resentInfos: ResentFormInput!): Form @deprecated(reason: "Utiliser la mutation signedByTransporter permettant d'apposer les signatures du collecteur-transporteur (case 18) et de l'exploitant du site d'entreposage provisoire ou de reconditionnement (case 19)")
  """
  Finalise un BSD
  Les champs suivants sont obligatoires pour pouvoir finaliser un bordereau et
  doivent avoir été renseignés au préalable
  
  ```
  emitter: {
    type
    company: {
      siret
      name
      address
      contact
      phone
      mail
    }
  }
  recipient: {
    processingOperation
    company: {
      siret
      name
      address
      contact
      phone
      mail
    }
  }
  transporter: {
    company: {
      siret
      name
      address
      contact
      mail
      phone
    }
    receipt
    department
    validityLimit
    numberPlate
  }
  wasteDetails: {
    code
    // onuCode est optionnel pour les déchets non-dangereux
    onuCode
    name
    packagings
    numberOfPackages
    quantity
    quantityType
    consistence
  }
  ```
  """
  markAsSealed(
    """ID d'un BSD"""
    id: ID!
  ): Form
  """Valide l'envoi d'un BSD"""
  markAsSent(
    """ID d'un BSD"""
    id: ID!
    """Informations liées à l'envoi"""
    sentInfo: SentFormInput!
  ): Form @deprecated(reason: "Utiliser la mutation signedByTransporter permettant d'apposer les signatures collecteur-transporteur (case 8) et émetteur (case 9)")
  """Valide la réception d'un BSD d'un entreposage provisoire ou reconditionnement"""
  markAsTempStored(id: ID!, tempStoredInfos: TempStoredFormInput!): Form
  """Valide l'acceptation ou le refus d'un BSD d'un entreposage provisoire ou reconditionnement"""
  markAsTempStorerAccepted(id: ID!, tempStorerAcceptedInfo: TempStorerAcceptedFormInput!): Form
  """Marque un segment de transport comme prêt à être emporté"""
  markSegmentAsReadyToTakeOver(id: ID!): TransportSegment
  """Prépare un nouveau segment de transport multimodal"""
  prepareSegment(id: ID!, nextSegmentInfo: NextSegmentInfoInput!, siret: String!): TransportSegment
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Permet de publier un brouillon pour le marquer comme prêt à être envoyé
  """
  publishBsda(id: ID!): Bsda
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Marque un dasri brouillon comme publié (isDraft=false)
  """
  publishBsdasri(
    """ID d'un Bsdasri"""
    id: ID!
  ): Bsdasri
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Permet de publier un brouillon pour le marquer comme prêt à être envoyé
  """
  publishBsvhu(id: ID!): Bsvhu
  """
  USAGE INTERNE
  Refuse une demande de rattachement à un un établissement
  """
  refuseMembershipRequest(id: ID!): CompanyPrivate!
  """
  USAGE INTERNE
  Supprime les droits d'un utilisateurs sur un établissement
  """
  removeUserFromCompany(siret: String!, userId: ID!): CompanyPrivate!
  """
  USAGE INTERNE
  Renouvelle le code de signature de l'établissement
  """
  renewSecurityCode(siret: String!): CompanyPrivate!
  """
  USAGE INTERNE
  Renvoie un email d'activation
  """
  resendActivationEmail(email: String!): Boolean!
  """
  USAGE INTERNE
  Renvoie l'email d'invitation à un établissement
  """
  resendInvitation(email: String!, siret: String!): Boolean!
  """
  USAGE INTERNE
  Envoie un email pour la réinitialisation du mot de passe
  """
  resetPassword(email: String!): Boolean!
  """DEPRECATED - Sauvegarde un BSD (création ou modification, si `FormInput` contient un ID)"""
  saveForm(
    """Payload du BSD"""
    formInput: FormInput!
  ): Form @deprecated(reason: "Utiliser createForm / updateForm selon le besoin")
  """
  Envoie une demande de rattachement de l'utilisateur courant
  à rejoindre l'établissement dont le siret est précisé en paramètre.
  Cette demande est communiquée à l'ensemble des administrateurs de
  l'établissement qui ont le choix de l'accepter ou de la refuser.
  """
  sendMembershipRequest(siret: String!): MembershipRequest
  sendVerificationCodeLetter(input: SendVerificationCodeLetterInput!): CompanyForVerification!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Signe un Bsda
  """
  signBsda(id: ID!, input: BsdaSignatureInput!): Bsda
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Appose une signature sur un Bsdasri, verrouille les cadres correspondant
  
  Une signature ne peut être apposée que par un membre de l'entreprise figurant sur le cadre concerné
  Ex: la signature TRANSPORT ne peut être apposée que par un membre de l'entreprise de transport
  
  Pour signer l'emission avec un compte transpoteur (cas de lasignature sur device transporteur),
  utiliser la mutation signBsdasriEmissionWithSecretCode
  """
  signBsdasri(id: ID!, signatureInput: BsdasriSignatureInput!): Bsdasri
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Appose une signature de type EMISSION via un compte n'appartenant pas à l'émetteur.
  Permet de signer un enlèvement sur le device transporteur grâce au code de sécurité de l'émetteur du dasri
  """
  signBsdasriEmissionWithSecretCode(id: ID!, signatureInput: BsdasriSignatureWithSecretCodeInput!): Bsdasri
  """Mutation permettant d'apposer une signature sur le bordereau."""
  signBsff(id: ID!, securityCode: Int, signature: SignatureInput!, type: BsffSignatureType!): Bsff!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Signe un BSVHU
  """
  signBsvhu(id: ID!, input: BsvhuSignatureInput!): Bsvhu
  """
  Permet de transférer le déchet à un transporteur lors de la collecte initiale (signatures en case 8 et 9)
  ou après une étape d'entreposage provisoire ou de reconditionnement (signatures en case 18 et 19).
  Cette mutation doit être appelée avec le token du collecteur-transporteur.
  L'établissement émetteur (resp. d'entreposage provisoire ou de reconditionnement) est authentifié quant à lui
  grâce à son code de signature disponible sur le tableau de bord Trackdéchets (Mon Compte > Établissements > Sécurité).
  D'un point de vue pratique, cela implique qu'un responsable de l'établissement émetteur (resp. d'entreposage provisoire ou de reconditionnement)
  renseigne le code de signature sur le terminal du collecteur-transporteur.
  Dans le cas où un éco-organisme figure sur le BSD, il est également possible de signer avec son code plutôt que celui de l'émetteur.
  Il faut alors fournir le code de l'éco-organisme en indiquant qu'il est l'auteur de la signature (signingInfo.signatureAuthor doit valoir ECO_ORGANISME).
  """
  signedByTransporter(
    """ID d'un BSD"""
    id: ID!
    """Informations liées aux signatures transporteur et émetteur (case 8 et 9)"""
    signingInfo: TransporterSignatureFormInput!
  ): Form
  """
  USAGE INTERNE
  Permet de créer un nouvel utilisateur
  """
  signup(userInfos: SignupInput!): User!
  """Marque un segment comme pris en charge par le nouveau transporteur"""
  takeOverSegment(id: ID!, takeOverInfo: TakeOverInput!): TransportSegment
  """
  USAGE INTERNE
  Édite les informations d'un récépissé courtier
  """
  updateBrokerReceipt(input: UpdateBrokerReceiptInput!): BrokerReceipt
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Met à jour un Bsda
  """
  updateBsda(id: ID!, input: BsdaInput!): Bsda
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Met à jour un dasri existant
  Par défaut, tous les champs sont modifiables.
  """
  updateBsdasri(
    """Payload de mise à jour d'un dasri"""
    bsdasriUpdateInput: BsdasriUpdateInput!
    """Identifiant unique du bordereau"""
    id: ID!
  ): Bsdasri!
  """Mutation permettant de modifier un bordereau existant de suivi de fluides frigorigènes."""
  updateBsff(id: ID!, input: BsffInput!): Bsff!
  """
  EXPERIMENTAL - Ne pas utiliser dans un contexte de production
  Met à jour un BSVHU
  """
  updateBsvhu(id: ID!, input: BsvhuInput!): Bsvhu
  """
  USAGE INTERNE
  Édite les informations d'un établissement
  """
  updateCompany(
    """Identifiant d'un récépissé courtier"""
    brokerReceiptId: String
    """Profil de l'établissement"""
    companyTypes: [CompanyType]
    """Email de contact"""
    contactEmail: String
    """Numéro de téléphone de contact"""
    contactPhone: String
    """Agréments de l'éco-organisme"""
    ecoOrganismeAgreements: [URL!]
    """Identifiant GEREP"""
    gerepId: String
    """Nom d'usage de l'établissement"""
    givenName: String
    """SIRET de l'établissement"""
    siret: String!
    """Identifiant d'un récépissé négociant"""
    traderReceiptId: String
    """Identifiant d'un récépissé transporteur"""
    transporterReceiptId: String
    """Identifiant d'un agrément VHU broyeur"""
    vhuAgrementBroyeurId: String
    """Identifiant d'un agrément VHU démolisseur"""
    vhuAgrementDemolisseurId: String
    """Site web"""
    website: String
  ): CompanyPrivate!
  """Mutation permettant de mettre à jour une fiche d'intervention lié à un bordereau existant."""
  updateFicheInterventionBsff(id: ID!, input: BsffFicheInterventionInput!, numero: String!): BsffFicheIntervention!
  """Met à jour un bordereau existant"""
  updateForm(
    """Payload de mise à jour d'un bordereau"""
    updateFormInput: UpdateFormInput!
  ): Form!
  """
  USAGE INTERNE
  Édite les informations d'un récépissé négociant
  """
  updateTraderReceipt(input: UpdateTraderReceiptInput!): TraderReceipt
  """Met à jour la plaque d'immatriculation ou le champ libre du transporteur"""
  updateTransporterFields(
    """ID d'un BSD"""
    id: ID!
    """Champ libre, utilisable par exemple pour noter les tournées des transporteurs"""
    transporterCustomInfo: String
    """Plaque d'immatriculation du transporteur"""
    transporterNumberPlate: String
  ): Form
  """
  USAGE INTERNE
  Édite les informations d'un récépissé transporteur
  """
  updateTransporterReceipt(input: UpdateTransporterReceiptInput!): TransporterReceipt
  """
  USAGE INTERNE
  Édite un agrément VHU
  """
  updateVhuAgrement(input: UpdateVhuAgrementInput!): VhuAgrement
  """
  USAGE INTERNE
  Permet de vérifier un établissement à partir du code de vérification
  envoyé par courrier à l'adresse de l'établissement renseigné au
  registre du commerce et des sociétés
  """
  verifyCompany(input: VerifyCompanyInput!): CompanyPrivate!
  """Verify a company manually"""
  verifyCompanyByAdmin(input: VerifyCompanyByAdminInput!): CompanyForVerification!
}

input BsffFicheInterventionInput {
  kilos: Int!
  owner: BsffOwnerInput!
  postalCode: String!
}

input BsffOwnerInput {
  company: CompanyInput!
}

"""Payload d'un établissement"""
input CompanyInput {
  """Adresse de l'établissement"""
  address: String
  """Nom du contact dans l'établissement"""
  contact: String
  """Email du contact dans l'établissement"""
  mail: String
  """Nom de l'établissement"""
  name: String
  """Numéro de téléphone de contact dans l'établissement"""
  phone: String
  """SIRET de l'établissement"""
  siret: String
  """Numéro de TVA intracommunautaire"""
  vatNumber: String
}

"""Payload de création d'un récépissé courtier"""
input CreateBrokerReceiptInput {
  """Département ayant enregistré la déclaration"""
  department: String!
  """Numéro de récépissé courtier"""
  receiptNumber: String!
  """Limite de validité du récépissé"""
  validityLimit: DateTime!
}

input BsdaInput {
  """Installation de destination"""
  destination: BsdaDestinationInput
  """Maitre d'ouvrage ou détenteur du déchet"""
  emitter: BsdaEmitterInput
  """Conditionnement"""
  packagings: [BsdaPackagingInput!]
  """Quantité"""
  quantity: BsdaQuantityInput
  """ Entreprise de transport"""
  transporter: BsdaTransporterInput
  """
  Type de bordereau
  Le type de bordereau impacte le workflow et les champs obligatoires
  """
  type: BsdaType
  """Dénomination du déchet"""
  waste: BsdaWasteInput
  """Entreprise de travaux"""
  worker: BsdaWorkerInput
}

input BsdaDestinationInput {
  """N° de CAP (le cas échéant)"""
  cap: String
  """Établissement de destination"""
  company: CompanyInput
  """Réalisation de l'opération (case 11)"""
  operation: BsdaOperationInput
  """Opération d'élimination / valorisation prévue (code D/R)"""
  plannedOperationCode: String
  """Expédition reçue à l'installation de destination"""
  reception: BsdaReceptionInput
}

input BsdaOperationInput {
  """Code D/R"""
  code: String
  """Date de réalisation de l'opération"""
  date: DateTime
}

input BsdaReceptionInput {
  """Lot accepté, accepté partiellement ou refusé"""
  acceptationStatus: BsdaAcceptationStatus
  """Date de présentation sur site"""
  date: DateTime
  """Quantité présentée"""
  quantity: BsdaQuantityInput
  """Motif de refus"""
  refusalReason: String
}

input BsdaQuantityInput {
  """Type de quantité (réelle ou estimé)"""
  type: BsdaQuantityType
  """Quantité en tonne"""
  value: Float
}

input BsdaEmitterInput {
  """Établissement MOA/détenteur. Partiellement rempli si l'émetteur est en fait un particulier"""
  company: CompanyInput
  """Indique si le détenteur est un particulier ou une entreprise"""
  isPrivateIndividual: Boolean
  """Informations chantier (si différente de l'adresse de l'entreprise)"""
  worksite: BsdaWorksiteInput
}

input BsdaWorksiteInput {
  address: String
  city: String
  """Autres informations, notamment le code chantier"""
  infos: String
  name: String
  postalCode: String
}

input BsdaPackagingInput {
  """Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"""
  other: String
  """Nombre de colis associés à ce conditionnement"""
  quantity: Int!
  """Type de conditionnement"""
  type: BsdaPackagingType
}

input BsdaTransporterInput {
  """Entreprise de transport"""
  company: CompanyInput
  recepisse: BsdaRecepisseInput
}

input BsdaRecepisseInput {
  department: String
  number: String
  validityLimit: DateTime
}

input BsdaWasteInput {
  """Mention ADR"""
  adr: String
  """Rubrique Déchet"""
  code: String
  """Consistence"""
  consistence: BsdaConsistence
  """Code famille"""
  familyCode: String
  """Nom du matériau"""
  materialName: String
  """Dénomination usuelle"""
  name: String
  """Numéros de scellés"""
  sealNumbers: [String!]
}

input BsdaWorkerInput {
  """Entreprise de travaux"""
  company: CompanyInput
  """Déclaration générale"""
  work: BsdaWorkInput
}

input BsdaWorkInput {
  """
  Indique si l'entreprise de travaux a une signature papier du MOA/détenteur du déchet
  Remettre une signature papier permet au détenteur de ne pas à avoir à signer sur la plateforme
  """
  hasEmitterPaperSignature: Boolean
}

input BsdasriCreateInput {
  emission: BsdasriEmissionInput
  emitter: BsdasriEmitterInput
  operation: BsdasriOperationInput
  reception: BsdasriReceptionInput
  recipient: BsdasriRecipientInput
  regroupedBsdasris: [RegroupedBsdasriInput]
  transport: BsdasriTransportInput
  transporter: BsdasriTransporterInput
}

input BsdasriEmissionInput {
  handedOverAt: DateTime
  wasteCode: String
  wasteDetails: BsdasriWasteDetailInput
}

input BsdasriWasteDetailInput {
  onuCode: String
  packagingInfos: [BsdasriPackagingInfoInput!]
  quantity: Int
  quantityType: QuantityType
}

input BsdasriPackagingInfoInput {
  """Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"""
  other: String
  """Nombre de colis associés à ce conditionnement"""
  quantity: Int!
  """Type de conditionnement"""
  type: BsdasriPackagings!
  """Nombre de colis associés à ce conditionnement"""
  volume: Int!
}

input BsdasriEmitterInput {
  company: CompanyInput
  """Champ libre émetteur"""
  customInfo: String
  onBehalfOfEcoorganisme: Boolean
  """Établissement émetteur"""
  type: BsdasriEmitterType
  workSite: WorkSiteInput
}

"""Payload d'une adresse chantier"""
input WorkSiteInput {
  address: String
  city: String
  infos: String
  name: String
  postalCode: String
}

input BsdasriOperationInput {
  processedAt: DateTime
  processingOperation: String
}

input BsdasriReceptionInput {
  receivedAt: DateTime
  wasteAcceptation: BsdasriWasteAcceptationInput
  wasteDetails: BsdasriWasteDetailInput
}

input BsdasriWasteAcceptationInput {
  refusalReason: String
  refusedQuantity: Int
  status: WasteAcceptationStatusInput
}

"""Statut d'acceptation d'un déchet"""
enum WasteAcceptationStatusInput {
  """Accepté en totalité"""
  ACCEPTED
  """Refus partiel"""
  PARTIALLY_REFUSED
  """Refusé"""
  REFUSED
}

input BsdasriRecipientInput {
  """Établissement émetteur"""
  company: CompanyInput
  """Champ libre transporteur"""
  customInfo: String
}

"""Payload de regroupement"""
input RegroupedBsdasriInput {
  """Identifiant unique du bordereau"""
  id: ID
}

input BsdasriTransportInput {
  handedOverAt: DateTime
  takenOverAt: DateTime
  wasteAcceptation: BsdasriWasteAcceptationInput
  wasteDetails: BsdasriWasteDetailInput
}

input BsdasriTransporterInput {
  """Établissement collecteur - transporteur"""
  company: CompanyInput
  """Champ libre transporteur"""
  customInfo: String
  """N° de récipissé"""
  receipt: String
  """Département"""
  receiptDepartment: String
  """Limite de validité du récipissé"""
  receiptValidityLimit: DateTime
}

input BsffInput {
  destination: BsffDestinationInput
  emitter: BsffEmitterInput
  packagings: [BsffPackagingInput!]
  quantity: BsffQuantityInput
  transporter: BsffTransporterInput
  waste: BsffWasteInput
}

input BsffDestinationInput {
  cap: String
  company: CompanyInput!
  operation: BsffDestinationOperationInput
  plannedOperation: BsffDestinationOperationInput
  reception: BsffDestinationReceptionInput
}

input BsffDestinationOperationInput {
  code: BsffOperationCode!
  qualification: BsffOperationQualification!
}

input BsffDestinationReceptionInput {
  date: DateTime!
  kilos: Int!
  refusal: String
}

input BsffEmitterInput {
  company: CompanyInput!
}

input BsffPackagingInput {
  litres: Int!
  numero: String!
  type: BsffPackagingType!
}

input BsffQuantityInput {
  isEstimate: Boolean!
  kilos: Int!
}

input BsffTransporterInput {
  company: CompanyInput!
  recepisse: BsffTransporterRecepisseInput
  transport: BsffTransporterTransportInput
}

input BsffTransporterRecepisseInput {
  department: String!
  number: String!
  validityLimit: DateTime!
}

input BsffTransporterTransportInput {
  mode: TransportMode!
}

input BsffWasteInput {
  adr: String!
  code: String!
  description: String!
}

input BsvhuInput {
  """Détails sur la destination"""
  destination: BsvhuDestinationInput
  """Détails sur l'émetteur"""
  emitter: BsvhuEmitterInput
  """Identification des VHUs"""
  identification: BsvhuIdentificationInput
  """Conditionnement du déchet"""
  packaging: BsvhuPackaging
  """Quantité de VHUs"""
  quantity: BsvhuQuantityInput
  """Détails sur le transporteur"""
  transporter: BsvhuTransporterInput
  """Code déchet. Presque toujours 16 01 06"""
  wasteCode: String
}

input BsvhuDestinationInput {
  """Numéro d'agrément de receveur"""
  agrementNumber: String
  """Coordonnées de l'entreprise qui recoit les déchets"""
  company: CompanyInput
  """Informations sur l'opétation de traitement"""
  operation: BsvhuOperationInput
  """Opération d'élimination / valorisation prévue (code D/R)"""
  plannedOperationCode: String
  """Informations de réception"""
  reception: BsvhuReceptionInput
  """Type de receveur: broyeur ou second centre VHU"""
  type: BsvhuDestinationType
}

input BsvhuOperationInput {
  """Opération de traitement réalisée (R4 ou R12)"""
  code: String
  """Date de réalisation"""
  date: DateTime
  """Broyeur de destination, à remplir uniquement lorsque la destination est lui même un centre VHU"""
  nextDestination: BsvhuNextDestinationInput
}

input BsvhuNextDestinationInput {
  company: CompanyInput
}

input BsvhuReceptionInput {
  """Lot accepté oui/non"""
  acceptationStatus: WasteAcceptationStatusInput
  """Date de présentation sur site"""
  date: DateTime
  """Identification éventuelle des VHU à la reception (numéro de lots ou d'ordre)"""
  identification: BsvhuIdentificationInput
  """Quantité réelle reçue"""
  quantity: BsvhuQuantityInput
  """Motif de refus"""
  refusalReason: String
}

input BsvhuIdentificationInput {
  """Numéros d'identification"""
  numbers: [String]
  """Type de numéros d'indentification"""
  type: BsvhuIdentificationType
}

input BsvhuQuantityInput {
  """Quantité en nombre (nombre de lots ou nombre de numéros d'ordre)"""
  number: Int
  """Quantité en tonnes"""
  tons: Float
}

input BsvhuEmitterInput {
  """Numéro d'agrément émetteur"""
  agrementNumber: String
  """Coordonnées de l'entreprise émétrice"""
  company: CompanyInput
}

input BsvhuTransporterInput {
  """Coordonnées de l'entreprise de transport"""
  company: CompanyInput
  """Récépissé transporteur"""
  recepisse: BsvhuRecepisseInput
  """Informations liés au transport"""
  transport: BsvhuTransportInput
}

input BsvhuRecepisseInput {
  department: String
  number: String
  validityLimit: DateTime
}

input BsvhuTransportInput {
  """Date de prise en charge"""
  takenOverAt: DateTime
}

"""Payload permettant le rattachement d'un établissement à un utilisateur"""
input PrivateCompanyInput {
  """Adresse de l'établissement"""
  address: String
  """Récipissé courtier (le cas échéant, pour les profils courtier)"""
  brokerReceiptId: String
  """Code NAF"""
  codeNaf: String
  """Nom de l'établissement"""
  companyName: String
  """Profil de l'établissement"""
  companyTypes: [CompanyType!]!
  """Liste des agréments de l'éco-organisme"""
  ecoOrganismeAgreements: [URL!]
  """Identifiant GEREP de l'établissement"""
  gerepId: String
  """Nom d'usage de l'établissement"""
  givenName: String
  """SIRET de l'établissement"""
  siret: String!
  """Récipissé négociant (le cas échéant, pour les profils négociant)"""
  traderReceiptId: String
  """Récipissé transporteur (le cas échéant, pour les profils transporteur)"""
  transporterReceiptId: String
  """Agrément VHU broyeur (le cas échéant, pour les profils VHU)"""
  vhuAgrementBroyeurId: String
  """Agrément VHU démolisseur (le cas échéant, pour les profils VHU)"""
  vhuAgrementDemolisseurId: String
}

"""Payload de création d'un bordereau"""
input CreateFormInput {
  """Annexe 2"""
  appendix2Forms: [AppendixFormInput!]
  """Courtier"""
  broker: BrokerInput
  """
  Identifiant personnalisé permettant de faire le lien avec un
  objet un système d'information tierce
  """
  customId: String
  ecoOrganisme: EcoOrganismeInput
  """Établissement émetteur/producteur du déchet (case 1)"""
  emitter: EmitterInput
  """
  Installation de destination ou d’entreposage ou de reconditionnement prévue (case 2)
  L'établissement renseigné doit être inscrit sur Trackdéchets en tant qu'installation
  de traitement ou de tri, transit, regroupement.
  """
  recipient: RecipientInput
  temporaryStorageDetail: TemporaryStorageDetailInput
  """Négociant (case 7)"""
  trader: TraderInput
  """Transporteur du déchet (case 8)"""
  transporter: TransporterInput
  """Détails du déchet (case 3)"""
  wasteDetails: WasteDetailsInput
}

"""Payload de création d'une annexe 2"""
input AppendixFormInput {
  """Identifiant unique du bordereau"""
  id: ID
  """
  N° de bordereau
  
  Déprécié : L'id du bordereau doit être utilisé comme identifiant (paramètre id).
  Le readableId permet de le récupérer via la query form.
  """
  readableId: ID
}

"""Payload lié au courtier"""
input BrokerInput {
  """Établissement courtier"""
  company: CompanyInput
  """Département"""
  department: String
  """N° de récipissé"""
  receipt: String
  """Limite de validité"""
  validityLimit: DateTime
}

"""Payload de liason d'un BSD à un eco-organisme"""
input EcoOrganismeInput {
  name: String!
  siret: String!
}

"""Payload lié à un l'émetteur du BSD (case 1)"""
input EmitterInput {
  """Établissement émetteur"""
  company: CompanyInput
  """DEPRECATED - Ancienne adresse chantier"""
  pickupSite: String
  """Type d'émetteur"""
  type: EmitterType
  """Adresse du chantier"""
  workSite: WorkSiteInput
}

"""
Payload lié à l'installation de destination ou d'entreprosage
ou de reconditionnement prévue (case 2)
"""
input RecipientInput {
  """N° de CAP (le cas échéant)"""
  cap: String
  """Établissement de destination"""
  company: CompanyInput
  """Si c'est un entreprosage provisoire ou reconditionnement"""
  isTempStorage: Boolean
  """Opération d'élimination / valorisation prévue (code D/R)"""
  processingOperation: String
}

input TemporaryStorageDetailInput {
  destination: DestinationInput
}

input DestinationInput {
  """N° de CAP prévu (le cas échéant)"""
  cap: String
  """
  Installation de destination prévue (case 14)
  L'établissement renseigné doit être inscrit sur Trackdéchets en tant qu'installation
  de traitement ou de tri, transit, regroupement.
  """
  company: CompanyInput
  """Opération d'élimination / valorisation prévue (code D/R)"""
  processingOperation: String
}

"""Payload lié au négociant"""
input TraderInput {
  """Établissement négociant"""
  company: CompanyInput
  """Département"""
  department: String
  """N° de récipissé"""
  receipt: String
  """Limite de validité"""
  validityLimit: DateTime
}

"""Collecteur - transporteur (case 8)"""
input TransporterInput {
  """Établissement collecteur - transporteur"""
  company: CompanyInput
  """Information libre, destinée aux transporteurs"""
  customInfo: String
  """Département"""
  department: String
  """Exemption de récipissé"""
  isExemptedOfReceipt: Boolean
  """Numéro de plaque d'immatriculation"""
  numberPlate: String
  """N° de récipissé"""
  receipt: String
  """Limite de validité du récipissé"""
  validityLimit: DateTime
}

"""Payload lié au détails du déchet (case 3, 4, 5, 6)"""
input WasteDetailsInput {
  """
  Code du déchet dangereux ou non-dangereux qui doit faire partie de la liste officielle du code de l'environnement :
  https://aida.ineris.fr/consultation_document/10327
  
  Il doit être composé de 3 paires de deux chiffres séparés par un espace et se termine éventuellement par une astérisque.
  
  Un exemple de déchet non-dangereux valide (déchets provenant de l'extraction des minéraux métallifères) :
  01 01 01
  
  Ce même exemple, mais avec un format invalide :
  010101
  
  Un exemple de déchet dangereux valide (stériles acidogènes provenant de la transformation du sulfure) :
  01 03 04*
  
  Ce même exemple, mais avec un format invalide :
  010304 *
  """
  code: String
  """Consistance"""
  consistence: Consistence
  """Dénomination usuelle"""
  name: String
  """DEPRECATED - Nombre de colis"""
  numberOfPackages: Int
  """Code ONU"""
  onuCode: String
  """DEPRECATED - Autre packaging (préciser)"""
  otherPackaging: String
  """Conditionnements"""
  packagingInfos: [PackagingInfoInput!]
  """DEPRECATED - Conditionnement"""
  packagings: [Packagings]
  """Contient des Polluants Organiques Persistants (POP) oui / non"""
  pop: Boolean
  """Quantité en tonnes"""
  quantity: Float
  """Réelle ou estimée"""
  quantityType: QuantityType
}

"""Payload lié à un élément de conditionnement"""
input PackagingInfoInput {
  """Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"""
  other: String
  """Nombre de colis associés à ce conditionnement"""
  quantity: Int!
  """Type de conditionnement"""
  type: Packagings!
}

"""Payload de création d'un récépissé négociant"""
input CreateTraderReceiptInput {
  """Département ayant enregistré la déclaration"""
  department: String!
  """Numéro de récépissé négociant"""
  receiptNumber: String!
  """Limite de validité du récépissé"""
  validityLimit: DateTime!
}

"""Payload de création d'un récépissé transporteur"""
input CreateTransporterReceiptInput {
  """Département ayant enregistré la déclaration"""
  department: String!
  """Numéro de récépissé transporteur"""
  receiptNumber: String!
  """Limite de validité du récépissé"""
  validityLimit: DateTime!
}

"""Lien d'upload"""
type UploadLink {
  """Clé permettant l'upload du fichier"""
  key: String
  """URL signé permettant d'uploader un fichier"""
  signedUrl: String
}

"""Payload de création d'un agrément VHU"""
input CreateVhuAgrementInput {
  """Numéro d'agrément VHU"""
  agrementNumber: String!
  """Département ayant enregistré la déclaration"""
  department: String!
}

"""Payload de suppression d'un récépissé courtier"""
input DeleteBrokerReceiptInput {
  """The id of the broker receipt to delete"""
  id: ID!
}

"""Payload de suppression d'un récépissé négociant"""
input DeleteTraderReceiptInput {
  """The id of the trader receipt to delete"""
  id: ID!
}

"""Payload de suppression d'un récépissé transporteur"""
input DeleteTransporterReceiptInput {
  """The id of the transporter receipt to delete"""
  id: ID!
}

"""Payload de suppression d'un agrément VHU"""
input DeleteVhuAgrementInput {
  """ID de l'agrément VHU à supprimer"""
  id: ID!
}

"""Payload lié à l'ajout de segment de transport multimodal (case 20 à 21)"""
input NextSegmentInfoInput {
  mode: TransportMode!
  transporter: TransporterInput
}

"""Payload d'import d'un BSD papier"""
input ImportPaperFormInput {
  """Courtier"""
  broker: BrokerInput
  """
  Identifiant libre qui peut éventuellement servir à faire le lien dans Trackdéchets
  entre le BSD papier et le BSD numérique dans le cas de l'import d'un BSD n'ayant
  pas été émis initialement dans Trackdéchets.
  """
  customId: String
  """Éco-organisme (apparait en case 1)"""
  ecoOrganisme: EcoOrganismeInput
  """Établissement émetteur/producteur du déchet (case 1)"""
  emitter: EmitterInput
  """
  Numéro de BSD Trackdéchets (uniquement dans le cas d'une mise à jour d'un
  bordereau émis initialement dans Trackdéchets)
  """
  id: ID
  """Informations liées au traitement du déchet (case 11)"""
  processedInfo: ProcessedFormInput!
  """Informations liées à la réception du déchet (case 10)"""
  receivedInfo: ReceivedFormInput!
  """
  Installation de destination ou d’entreposage ou de reconditionnement prévue (case 2)
  L'établissement renseigné doit être inscrit sur Trackdéchets en tant qu'installation
  de traitement ou de tri, transit, regroupement.
  """
  recipient: RecipientInput
  """Informations liées aux signatures transporteur et émetteur (case 8 et 9)"""
  signingInfo: SignatureFormInput!
  """Négociant (case 7)"""
  trader: TraderInput
  """Transporteur du déchet (case 8)"""
  transporter: TransporterInput
  """Détails du déchet (case 3)"""
  wasteDetails: WasteDetailsInput
}

"""Payload de traitement d'un BSD"""
input ProcessedFormInput {
  """Destination ultérieure prévue (case 12)"""
  nextDestination: NextDestinationInput
  """Si oui ou non il y a eu perte de traçabalité"""
  noTraceability: Boolean
  """Date à laquelle le déchet a été traité"""
  processedAt: DateTime!
  """Personne en charge du traitement"""
  processedBy: String!
  """
  Description de l'opération d’élimination / valorisation (case 11)
  Elle se complète automatiquement lorsque non fournie
  """
  processingOperationDescription: String
  """Traitement réalisé (code D/R)"""
  processingOperationDone: String!
}

input NextDestinationInput {
  """Établissement de destination ultérieur"""
  company: InternationalCompanyInput!
  """Traitement prévue (code D/R)"""
  processingOperation: String!
}

"""
Payload d'un établissement pouvant se situer en France
ou à l'étranger
"""
input InternationalCompanyInput {
  """Adresse de l'établissement"""
  address: String
  """Nom du contact dans l'établissement"""
  contact: String
  """
  Code ISO 3166-1 alpha-2 du pays d'origine de l'entreprise :
  https://fr.wikipedia.org/wiki/ISO_3166-1_alpha-2
  
  En l'absence de code, l'entreprise est considérée comme résidant en France.
  """
  country: String
  """Email du contact dans l'établissement"""
  mail: String
  """Nom de l'établissement"""
  name: String
  """Numéro de téléphone de contact dans l'établissement"""
  phone: String
  """SIRET de l'établissement, optionnel dans le cas d'un établissement à l'étranger"""
  siret: String
}

"""Payload de réception d'un BSD"""
input ReceivedFormInput {
  """Quantité réelle présentée (case 10)"""
  quantityReceived: Float
  """Date à laquelle le déchet a été reçu (case 10)"""
  receivedAt: DateTime!
  """Nom de la personne en charge de la réception du déchet (case 10)"""
  receivedBy: String!
  """Date à laquelle le déchet a été accepté ou refusé (case 10)"""
  signedAt: DateTime
  """Statut d'acceptation du déchet (case 10)"""
  wasteAcceptationStatus: WasteAcceptationStatusInput
  """Raison du refus (case 10)"""
  wasteRefusalReason: String
}

"""Payload simplifié de signature d'un BSD par un transporteur"""
input SignatureFormInput {
  """Date de l'envoi du déchet par l'émetteur (case 9)"""
  sentAt: DateTime!
  """Nom de la personne responsable de l'envoi du déchet (case 9)"""
  sentBy: String!
}

"""Cet objet est renvoyé par la mutation login qui est dépréciée"""
type AuthPayload {
  """
  Bearer token à durée illimité permettant de s'authentifier
  à l'API Trackdéchets. Pour ce faire, il doit être passé dans le
  header d'autorisation `Authorization: Bearer ******`
  """
  token: String!
  """Utilisateur lié au token"""
  user: User!
}

input AcceptedFormInput {
  """Quantité réelle présentée (case 10)"""
  quantityReceived: Float!
  """Date à laquelle le déchet a été accepté ou refusé (case 10)"""
  signedAt: DateTime!
  """Nom de la personne en charge de l'acceptation' du déchet (case 10)"""
  signedBy: String!
  """Statut d'acceptation du déchet (case 10)"""
  wasteAcceptationStatus: WasteAcceptationStatusInput!
  """Raison du refus (case 10)"""
  wasteRefusalReason: String
}

"""Payload lié au détails du déchet du BSD suite (case 14 à 19)"""
input ResealedFormInput {
  """Destination finale du déchet (case 14)"""
  destination: DestinationInput
  """Transporteur du déchet reconditionné"""
  transporter: TransporterInput
  """Détail du déchet en cas de reconditionnement (case 15 à 19)"""
  wasteDetails: WasteDetailsInput
}

"""Payload lié au détails du déchet du BSD suite et à la signature de l'envoi (case 14 à 20)"""
input ResentFormInput {
  """Destination finale du déchet (case 14)"""
  destination: DestinationInput
  """Date de signature du BSD suite (case 19). Défaut à la date d'aujourd'hui."""
  signedAt: DateTime!
  """Nom du signataire du BSD suite  (case 19)"""
  signedBy: String!
  """Transporteur du déchet reconditionné"""
  transporter: TransporterInput
  """Détail du déchet en cas de reconditionnement (case 15 à 19)"""
  wasteDetails: WasteDetailsInput
}

"""Payload de signature d'un BSD"""
input SentFormInput {
  """Date de l'envoi du déchet par l'émetteur (case 9)"""
  sentAt: DateTime!
  """Nom de la personne responsable de l'envoi du déchet (case 9)"""
  sentBy: String!
}

input TempStoredFormInput {
  """Quantité réelle présentée (case 13)"""
  quantityReceived: Float!
  """Réelle ou estimée"""
  quantityType: QuantityType!
  """Date à laquelle le déchet a été reçu (case 13)"""
  receivedAt: DateTime!
  """Nom de la personne en charge de la réception du déchet (case 13)"""
  receivedBy: String!
  """Date à laquelle le déchet a été accepté ou refusé (case 13). Défaut à la date d'aujourd'hui."""
  signedAt: DateTime
  """Statut d'acceptation du déchet (case 13)"""
  wasteAcceptationStatus: WasteAcceptationStatusInput
  """Raison du refus (case 13)"""
  wasteRefusalReason: String
}

input TempStorerAcceptedFormInput {
  """Quantité réelle présentée (case 13)"""
  quantityReceived: Float!
  """Réelle ou estimée"""
  quantityType: QuantityType!
  """Date à laquelle le déchet a été accepté ou refusé (case 13)."""
  signedAt: DateTime!
  """Nom de la personne en charge de l'acceptation du déchet (case 13)"""
  signedBy: String!
  """Statut d'acceptation du déchet (case 13)"""
  wasteAcceptationStatus: WasteAcceptationStatusInput!
  """Raison du refus (case 13)"""
  wasteRefusalReason: String
}

"""Payload de création d'un BSD"""
input FormInput {
  """Annexe 2"""
  appendix2Forms: [AppendixFormInput!]
  """Courtier"""
  broker: BrokerInput
  """
  Identifiant personnalisé permettant de faire le lien avec un
  objet un système d'information tierce
  """
  customId: String
  ecoOrganisme: EcoOrganismeInput
  """Établissement émetteur/producteur du déchet (case 1)"""
  emitter: EmitterInput
  """Identifiant opaque"""
  id: ID
  """
  Installation de destination ou d’entreposage ou de reconditionnement prévue (case 2)
  L'établissement renseigné doit être inscrit sur Trackdéchets en tant qu'installation
  de traitement ou de tri, transit, regroupement.
  """
  recipient: RecipientInput
  temporaryStorageDetail: TemporaryStorageDetailInput
  """Négociant (case 7)"""
  trader: TraderInput
  """Transporteur du déchet (case 8)"""
  transporter: TransporterInput
  """Détails du déchet (case 3)"""
  wasteDetails: WasteDetailsInput
}

input SendVerificationCodeLetterInput {
  siret: String!
}

input BsdaSignatureInput {
  """Nom et prénom du signataire"""
  author: String!
  """Date de la signature"""
  date: DateTime
  """Code de sécurité de l'entreprise pour laquelle on signe. Permet de signer en tant que. Optionnel"""
  securityCode: Int
  """Type de signature apposé"""
  type: BsdaSignatureType!
}

enum BsdaSignatureType {
  EMISSION
  OPERATION
  TRANSPORT
  WORK
}

input BsdasriSignatureInput {
  author: String!
  type: BsdasriSignatureType!
}

input BsdasriSignatureWithSecretCodeInput {
  author: String!
  securityCode: Int
}

input SignatureInput {
  author: String!
  date: DateTime!
}

enum BsffSignatureType {
  EMISSION
  OPERATION
  RECEPTION
  TRANSPORT
}

input BsvhuSignatureInput {
  """Nom et prénom du signataire"""
  author: String!
  """Date de la signature"""
  date: DateTime
  """Code de sécurité de l'entreprise pour laquelle on signe. Permet de signer en tant que. Optionnel"""
  securityCode: Int
  """Type de signature apposé"""
  type: SignatureTypeInput!
}

"""Payload de signature d'un BSD par un transporteur"""
input TransporterSignatureFormInput {
  """Code ONU"""
  onuCode: String
  """Conditionnements"""
  packagingInfos: [PackagingInfoInput!]
  """DEPRECATED - Conditionnement"""
  packagings: [Packagings]
  """Quantité en tonnes"""
  quantity: Float!
  """Code de signature permettant d'authentifier l'émetteur"""
  securityCode: Int!
  """Date de l'envoi du déchet par l'émetteur (case 9)"""
  sentAt: DateTime!
  """Nom de la personne responsable de l'envoi du déchet (case 9)"""
  sentBy: String!
  """Dénomination de l'auteur de la signature, par défaut il s'agit de l'émetteur"""
  signatureAuthor: SignatureAuthor
  """Si oui on non le BSD a été signé par l'émetteur"""
  signedByProducer: Boolean!
  """Si oui ou non le BSD a été signé par un transporteur"""
  signedByTransporter: Boolean!
}

"""Dénomination de l'auteur de la signature"""
enum SignatureAuthor {
  """L'auteur de la signature est l'éco-organisme figurant sur le BSD"""
  ECO_ORGANISME
  """L'auteur de la signature est l'émetteur du déchet"""
  EMITTER
}

input SignupInput {
  """Email de l'utilisateur"""
  email: String!
  """Nom de l'utilisateur"""
  name: String!
  """Mot de passe de l'utilisateur"""
  password: String!
  """Numéro de téléphone de l'utilisateur"""
  phone: String
}

"""Payload de prise en charge de segment"""
input TakeOverInput {
  takenOverAt: DateTime!
  takenOverBy: String!
}

"""Payload d'édition d'un récépissé courtier"""
input UpdateBrokerReceiptInput {
  """Département ayant enregistré la déclaration"""
  department: String
  """The id of the broker receipt to modify"""
  id: ID!
  """Numéro de récépissé courtier"""
  receiptNumber: String
  """Limite de validité du récépissé"""
  validityLimit: DateTime
}

input BsdasriUpdateInput {
  emission: BsdasriEmissionInput
  emitter: BsdasriEmitterInput
  operation: BsdasriOperationInput
  reception: BsdasriReceptionInput
  recipient: BsdasriRecipientInput
  regroupedBsdasris: [RegroupedBsdasriInput]
  transport: BsdasriTransportInput
  transporter: BsdasriTransporterInput
}

"""Payload de mise à jour d'un bordereau"""
input UpdateFormInput {
  """Annexe 2"""
  appendix2Forms: [AppendixFormInput!]
  """Courtier"""
  broker: BrokerInput
  """
  Identifiant personnalisé permettant de faire le lien avec un
  objet un système d'information tierce
  """
  customId: String
  ecoOrganisme: EcoOrganismeInput
  """Établissement émetteur/producteur du déchet (case 1)"""
  emitter: EmitterInput
  """Identifiant opaque"""
  id: ID!
  """
  Installation de destination ou d’entreposage ou de reconditionnement prévue (case 2)
  L'établissement renseigné doit être inscrit sur Trackdéchets en tant qu'installation
  de traitement ou de tri, transit, regroupement.
  """
  recipient: RecipientInput
  temporaryStorageDetail: TemporaryStorageDetailInput
  """Négociant (case 7)"""
  trader: TraderInput
  """Transporteur du déchet (case 8)"""
  transporter: TransporterInput
  """Détails du déchet (case 3)"""
  wasteDetails: WasteDetailsInput
}

"""Payload d'édition d'un récépissé négociant"""
input UpdateTraderReceiptInput {
  """Département ayant enregistré la déclaration"""
  department: String
  """The id of the trader receipt to modify"""
  id: ID!
  """Numéro de récépissé négociant"""
  receiptNumber: String
  """Limite de validité du récépissé"""
  validityLimit: DateTime
}

"""Payload d'édition d'un récépissé transporteur"""
input UpdateTransporterReceiptInput {
  """Département ayant enregistré la déclaration"""
  department: String
  """The id of the transporter receipt to modify"""
  id: ID!
  """Numéro de récépissé transporteur"""
  receiptNumber: String
  """Limite de validité du récépissé"""
  validityLimit: DateTime
}

"""Payload d'édition d'un agrément VHU"""
input UpdateVhuAgrementInput {
  """Numéro d'agrément VHU"""
  agrementNumber: String
  """Département ayant enregistré la déclaration"""
  department: String
  """ID de l'agrément VHU à modifier"""
  id: ID!
}

input VerifyCompanyInput {
  """Le code de vérification de l'établissement envoyé par courrier"""
  code: String!
  """Le SIRET de l'établissement à vérifier"""
  siret: String!
}

input VerifyCompanyByAdminInput {
  siret: String!
  verificationComment: String
}

type Subscription {
  """
  DEPRECATED - Privilégier l'utilisation d'un polling régulier sur la query `formsLifeCycle`
  
  Permet de s'abonner aux changements de statuts d'un BSD
  """
  forms(
    """Token permettant de s'authentifier à l'API"""
    token: String!
  ): FormSubscription
}

"""
DEPRECATED - Privilégier l'utilisation d'un polling régulier sur la query `formsLifeCycle`

Mise à jour d'un BSD
"""
type FormSubscription {
  """Type de mutation"""
  mutation: String
  """BSD concerné"""
  node: Form
  """Ancienne valeurs"""
  previousValues: Form
  """Liste des champs mis à jour"""
  updatedFields: [String]
}

input BsdasriInput {
  emission: BsdasriEmissionInput
  emitter: BsdasriEmitterInput
  operation: BsdasriOperationInput
  reception: BsdasriReceptionInput
  recipient: BsdasriRecipientInput
  transport: BsdasriTransportInput
  transporter: BsdasriTransporterInput
}

input BsdasriRecipientWasteDetailInput {
  quantity: Int
  volume: Int
}

enum BsdasriRole {
  """Les Bsdasri dont je suis l'émetteur"""
  EMITTER
  """Les Bsdasri dont je suis la destination de traitement"""
  RECIPIENT
  """Les Bsdasri dont je suis transporteur"""
  TRANSPORTER
}
